// 栈：1.判断入栈出栈序列是否合法
int Judge(char a[])
{
	int i = 0;
	int j = k = 0;
	while(a[i] != '\0')
	{
		switch(a[i])
		{
			case 'I': j++; break;
			case 'O': k++; break;
		}
		i++;
	}
	if(j != k)
	{
		cout << "序列非法" << endl;
		return false;
	}
	else
	{
		cout << "序列合法" << endl;
		return true;
	}
}



// 栈：2.利用栈判断单链表是否对称
int dc(LinkList L, int n)
{
	int i;
	char s[n / 2];
	p = L->next;
	for(i = 0;i < n/2; i++)
	{
		s[i] = p->data;
		p = p->next;
	}
	i--;
	if(n % 2 == 1)			// 判断单链表长度
	{
		p = p->next;
	}
	while(p != NULL && s[i] == p->data)
	{
		i--;
		p = p->next;
	}
	if(i == -1)
		return 1;
	else
		return 0;
}



// 栈：3.实现共享栈的入栈，出栈.
SqStack s;

// 入栈
int push(int i, int x)
{
	if(i < 0 || i > 1)
	{
		cout << "栈号输入错误！" << endl;
		exit(0);
	}
	if(s.top[1] - s.top[0] == 1)
	{
		cout << "栈已满" << endl;
		return 0;
	}
	switch(i)
	{
		case 0 : s.stack[++s.top[0]] = x; return 1; break;
		case 1 : s.stack[--s.top[1]] = x; return 1; break;
	}
}

// 出栈

int pop(int i)
{
	if(i < 0 || i > 1)
	{
		cout << "栈序号错误！" << endl;
		exit(0);
	}
	switch(i)
	{
		case 0:
			if(s.top[0] == -1)
			{
				cout << "栈空" << endl;
				return -1;
			}
			else
				return s.stack[s.top[0]--];
			break;
		case 1:
			if(s.top[1] == MaxSize)
			{
				cout << "栈空" << endl;
				return -1;
			}
			else
				return s.stack[s.top[0]++];
			break;
	}
}



// 队列：1.循环队列所以空间都对其利用保存元素

// 入队
int EnQueue(SqQueue &Q, int x)
{
	if(Q.front == Q.rear && Q.tag == 1)
	{
		return 0;
	}
	Q.data[Q.rear] = x;
	Q.rear = (Q.rear + 1) % MaxSize;
	Q.tag = 1;
	return 1;
}

// 出队
int DeQueue(SqQuue &Q, int &x)
{
	if(Q.front == Q.rear && Q.tag == 0)
		return 0;
	x = Q.data[Q.front];
	Q.front = (Q.front + 1) % MaxSize;
	Q.tag = 0;
	return 1;
}




// 队列： 2.利用栈实现队列元素的逆置

void Inverser(Stack &S, Queue &Q)
{
	while(!QueueEmpty(Q))
	{
		x = DeQueue(Q);
		Push(S, x);
	}
	while(!StackEmpty(S))
	{
		Pop(S, x);
		EnQueue(Q, x);
	}
}




// 队列：3.用两个栈模拟队列的运用

// 入队
int EnQueue(SqStack &S1, SqStack &S2, int e)
{
	if(!SqStackOverflow(s1))			// 如果栈S1不满，则入栈
	{
		Push(S1, e);					
		return 1;
	}
	if(!SqStackOverflow(S1) && !SqStackEmpty(S2))	// 如果栈s1不满，栈s2不空，则队列满
	{
		cout << "队列满！" << endl;
		return 0;
	}
	if(SqStackOverflow(S1) && StackEmpty(S2))		// 如果栈s1满，S2为空，则将s1入栈到s2
	{
		while(!SqStackEmpty(S1))
		{
			Pop(S1, x);
			Push(S2, x);
		}
	}
	Push(S1, e);									// 入栈到s1
	return 1;
}

// 出队

void DeQueue(SqStack &S1, SqStack &S2, int &x)
{
	if(!SqStackEmpty(S2))							// 如果栈s2不空，则出队
	{
		Pop(S2, x);
	}
	else if(SqStackEmpty(S1))						// 如果栈S2为空，s1也为空，则队列空
	{
		cout << "队列为空" << endl;
	}
	else											// 栈s2为空，栈s1不空，则将s1入栈到s2
	{
		while(!SqStackEmpty(S1))
		{
			Pop(S1, x);
			Push(S2, x);
		}
		Pop(S2, x);									// 出队
	}
	
}

// 判空
int QueueEmpty(SqStack S1, SqStack S2)
{
	if(SqStackEmpty(s1) && SqStackEmpty(S2))
		return 1;
	else
		return 0;
}



// 队列：4.括号配对(不完善)

bool BracketsCheck(char *str)
{
	SqStack S;
	InitStack(S);
	int i = 0;
	while(str[i] != '\0')
	{
		switch(str[i])
		{
			case '(' : Push(S, '('); break;
			case '[' : Push(S, '['); break;
			case '{' : Push(S, '{'); break;
			case ')' : Pop(S, e);
				if(e != '(') return false;
				break;
			case ']' : Pop(S, e);
				if(e != '[') return false;
				break;
			case '}' : Pop(S, e);
				if(e != '{') return false;
				break;
			default : break;
		}
		i++;
	}
	if(!IsEmpty(S))
	{
		cout << "括号不匹配！" << endl;
		return false;
	}
	else
	{
		cout << "括号匹配！" << endl;
		return true;
	}
}


// 队列：5. 火车座位调度

void Train_Arrange(char *train)
{
	char *p = train, *q = train, c;
	stack s;
	InitStack(s);
	while(*p)
	{
		if(*p == 'H')			// 将所有硬座入栈
			Push(s, *p);
		else					// 所有软座排序在火车前部
			*(q++) = *p;
		p++;
	}
	while(!StackEmpty(s))
	{
		Pop(s, c);				// 将硬座排在软座后
		*(q++) = c;
	}
}



// 队列：6.实现一个递归函数的计算（非递归）
double p(int n, double x)
{
	struct stack
	{
		int no;
		double val;
	}st[MaxSize];
	int top = -1, i;
	double fv1 = 1, fv2 = 2 * x;
	for(i = n; i >= 2; i--)
	{
		top++;
		st[top].no = i;
	}
	while(top >= 0)
	{
		st[top].val = (2 * x * fv2) - (2 * (st[top].no - 1) * fv1);
		fv1 = fv2;
		fv2 = st[top].val;
		top--;
	}
	if(n == 0)
	{
		return fv1;
	}
	return fv2;
}


// 队列：7.实现一个轮渡调度

Queue q;		// 过江渡船载渡队列
Queue q1;		// 客车队列
Queue q2;		// 货车队列

void manager()
{
	int i = 0, j = 0;
	while(j < 10)
	{
		if(!QueueEmpty(q1) && i < 4)
		{
			DeQueue(q1, x);
			EnQueue(q, x);
			i++;
			j++;
		}
		else if(i == 4 && !QueueEmpty(q2))
		{
			DeQueue(q2, x);
			EnQueue(q, x);
			j++;
			i = 0;
		}
		else
		{
			while(j < 10 && i < 4 && !QueueEmpty(q2))
			{
				DeQueue(q2, x);
				EnQueue(q, x);
				i++;
				j++;
			}
			i = 0;
		}
		if(QueueEmpty(q1) && QueueEmpty(q2))
			j = 11;
	}
}


######################################


#include <iostream>
using namespace std;


#define MaxSize 10
typedef struct 
{
	int top[2];
	int stack[MaxSize];
}SqStack;

typedef struct LNode
{
	char data;
	struct LNode *next;
}LNode, *LinkList;

typedef struct 
{
	int data[MaxSize];
	int front, rear;
}SqQueue;

bool QueueEmpty(SqQueue Q)
{
	if(Q.rear == Q.front)
		return true;
	else
		return false;
}

bool StackEmpty(SqStack S)
{
	if(S.top == -1)
		return true;
	else
		return false;
}

bool StackOverflow(SqStack S)
{
	if(S.top == MaxSize - 1)
		return true;
	else
		return false;
}

void DeQueue(SqQueue &Q, int &x)
{
	if(Q.rear == Q.front)
		return;
	x = Q.data[Q.rear--];
}

void Push(SqStack &S, int x)
{
	if(S.top == MaxSize)
		return;
	S.data[++S.top] = x;
}

void EnQueue(SqQueue &Q, int x)
{
	if(Q.rear == MaxSize)
		return;
	Q.data[++Q.rear] = x;
}

void Pop(SqStack &S, int &x)
{
	if(S.top == -1)
		return ;
	x = S.data[S.top--];
}


void InitStack(SqStack &S)
{
	s.top = -1;
}





// 队列：7.实现一个轮渡调度

Queue q;		// 过江渡船载渡队列
Queue q1;		// 客车队列
Queue q2;		// 货车队列

void manager()
{
	int i = 0, j = 0;
	while(j < 10)
	{
		if(!QueueEmpty(q1) && i < 4)
		{
			DeQueue(q1, x);
			EnQueue(q, x);
			i++;
			j++;
		}
		else if(i == 4 && !QueueEmpty(q2))
		{
			DeQueue(q2, x);
			EnQueue(q, x);
			j++;
			i = 0;
		}
		else
		{
			while(j < 10 && i < 4 && !QueueEmpty(q2))
			{
				DeQueue(q2, x);
				EnQueue(q, x);
				i++;
				j++;
			}
			i = 0;
		}
		if(QueueEmpty(q1) && QueueEmpty(q2))
			j = 11;
	}
}


// 队列：6.实现一个递归函数的计算（非递归）
double p(int n, double x)
{
	struct stack
	{
		int no;
		double val;
	}st[MaxSize];
	int top = -1, i;
	double fv1 = 1, fv2 = 2 * x;
	for(i = n; i >= 2; i--)
	{
		top++;
		st[top].no = i;
	}
	while(top >= 0)
	{
		st[top].val = (2 * x * fv2) - (2 * (st[top].no - 1) * fv1);
		fv1 = fv2;
		fv2 = st[top].val;
		top--;
	}
	if(n == 0)
	{
		return fv1;
	}
	return fv2;
}





// 队列：5. 火车座位调度

void Train_Arrange(char *train)
{
	char *p = train, *q = train, c;
	stack s;
	InitStack(s);
	while(*p)
	{
		if(*p == 'H')			// 将所有硬座入栈
			Push(s, *p);
		else					// 所有软座排序在火车前部
			*(q++) = *p;
		p++;
	}
	while(!StackEmpty(s))
	{
		Pop(s, c);				// 将硬座排在软座后
		*(q++) = c;
	}
}



// 队列：4.括号配对(不完善)

bool BracketsCheck(char *str)
{
	SqStack S;
	InitStack(S);
	int i = 0;
	while(str[i] != '\0')
	{
		switch(str[i])
		{
			case '(' : Push(S, '('); break;
			case '[' : Push(S, '['); break;
			case '{' : Push(S, '{'); break;
			case ')' : Pop(S, e);
				if(e != '(') return false;
				break;
			case ']' : Pop(S, e);
				if(e != '[') return false;
				break;
			case '}' : Pop(S, e);
				if(e != '{') return false;
				break;
			default : break;
		}
		i++;
	}
	if(!IsEmpty(S))
	{
		cout << "括号不匹配！" << endl;
		return false;
	}
	else
	{
		cout << "括号匹配！" << endl;
		return true;
	}
}



// 队列：3.用两个栈模拟队列的运用

// 入队
int EnQueue(SqStack &S1, SqStack &S2, int e)
{
	if(!SqStackOverflow(s1))			// 如果栈S1不满，则入栈
	{
		Push(S1, e);					
		return 1;
	}
	if(!SqStackOverflow(S1) && !SqStackEmpty(S2))	// 如果栈s1不满，栈s2不空，则队列满
	{
		cout << "队列满！" << endl;
		return 0;
	}
	if(SqStackOverflow(S1) && StackEmpty(S2))		// 如果栈s1满，S2为空，则将s1入栈到s2
	{
		while(!SqStackEmpty(S1))
		{
			Pop(S1, x);
			Push(S2, x);
		}
	}
	Push(S1, e);									// 入栈到s1
	return 1;
}

// 出队

void DeQueue(SqStack &S1, SqStack &S2, int &x)
{
	if(!SqStackEmpty(S2))							// 如果栈s2不空，则出队
	{
		Pop(S2, x);
	}
	else if(SqStackEmpty(S1))						// 如果栈S2为空，s1也为空，则队列空
	{
		cout << "队列为空" << endl;
	}
	else											// 栈s2为空，栈s1不空，则将s1入栈到s2
	{
		while(!SqStackEmpty(S1))
		{
			Pop(S1, x);
			Push(S2, x);
		}
		Pop(S2, x);									// 出队
	}
	
}

// 判空
int QueueEmpty(SqStack S1, SqStack S2)
{
	if(SqStackEmpty(s1) && SqStackEmpty(S2))
		return 1;
	else
		return 0;
}


// 队列： 2.利用栈实现队列元素的逆置

void Inverser(Stack &S, Queue &Q)
{
	while(!QueueEmpty(Q))
	{
		x = DeQueue(Q);
		Push(S, x);
	}
	while(!StackEmpty(S))
	{
		Pop(S, x);
		EnQueue(Q, x);
	}
}




// 队列：1.循环队列所以空间都对其利用保存元素

// 入队
int EnQueue(SqQueue &Q, int x)
{
	if(Q.front == Q.rear && Q.tag == 1)
	{
		return 0;
	}
	Q.data[Q.rear] = x;
	Q.rear = (Q.rear + 1) % MaxSize;
	Q.tag = 1;
	return 1;
}

// 出队
int DeQueue(SqQuue &Q, int &x)
{
	if(Q.front == Q.rear && Q.tag == 0)
		return 0;
	x = Q.data[Q.front];
	Q.front = (Q.front + 1) % MaxSize;
	Q.tag = 0;
	return 1;
}




// 栈：3.实现共享栈的入栈，出栈.
SqStack s;

// 入栈
int push(int i, int x)
{
	if(i < 0 || i > 1)
	{
		cout << "栈号输入错误！" << endl;
		exit(0);
	}
	if(s.top[1] - s.top[0] == 1)
	{
		cout << "栈已满" << endl;
		return 0;
	}
	switch(i)
	{
		case 0 : s.stack[++s.top[0]] = x; return 1; break;
		case 1 : s.stack[--s.top[1]] = x; return 1; break;
	}
}

// 出栈

int pop(int i)
{
	if(i < 0 || i > 1)
	{
		cout << "栈序号错误！" << endl;
		exit(0);
	}
	switch(i)
	{
		case 0:
			if(s.top[0] == -1)
			{
				cout << "栈空" << endl;
				return -1;
			}
			else
				return s.stack[s.top[0]--];
			break;
		case 1:
			if(s.top[1] == MaxSize)
			{
				cout << "栈空" << endl;
				return -1;
			}
			else
				return s.stack[s.top[0]++];
			break;
	}
}


// 栈：2.利用栈判断单链表是否对称
int dc(LinkList L, int n)
{
	int i;
	char s[n / 2];
	p = L->next;
	for(i = 0;i < n/2; i++)
	{
		s[i] = p->data;
		p = p->next;
	}
	i--;
	if(n % 2 == 1)			// 判断单链表长度
	{
		p = p->next;
	}
	while(p != NULL && s[i] == p->data)
	{
		i--;
		p = p->next;
	}
	if(i == -1)
		return 1;
	else
		return 0;
}



// 栈：1.判断入栈出栈序列是否合法
int Judge(char a[])
{
	int i = 0;
	int j = k = 0;
	while(a[i] != '\0')
	{
		switch(a[i])
		{
			case 'I': j++; break;
			case 'O': k++; break;
		}
		i++;
	}
	if(j != k)
	{
		cout << "序列非法" << endl;
		return false;
	}
	else
	{
		cout << "序列合法" << endl;
		return true;
	}
}



int main()
{
   cout << "Hello World";
   return 0;
}