// 树：19.求孩子兄弟表示法存储的森林（树）的叶节点个数

int Leaves(Tree t)
{
	if(t == NULL)
		return 0;
	if(t->fch == NULL)
		return 1 + Leaves(t->nsib);
	else
		return Leaves(t->fch) + Leaves(t->nsib);
}



// 树：20.求孩子兄弟法存储的森林（树）深度

int Height(CSTree bt)
{
	int hc, hs;
	if(bt == NULL)
		return 0;
	else
	{
		hc = Height(bt->firstchild);
		hs = Height(bt->nextsibling);
		if(hc + 1 > hs)
			return hc + 1;
		else
			return hs;
	}
}


// 树：21.根据节点的度和层序序列，构造树

#define maxNodex 15
void creatCSTree_Degree(CSTree &T, int e[], int degree[], int n)
{
	CSNode *pointer = new CSNode[maxNodex];
	int i, j, d, k = 0;
	for(i = 0; i < n; i++)
	{
		pointer[i]->data = e[i];
		pointer[i]->lchild = pointer[i]->rsibling = NULL;
	}
	for(i = 0; i < n; i++)
	{
		d = degree[i];
		if(d)
		{
			k++;
			pointer[i]->lchild = pointer[k];
			for(j = 2; j <= d; j++)
			{
				k++;
				pointer[k - 1]->rsibling = pointer[k];
			}
		}
	}
	T = pointer[0];
	delete[] pointer;
}


// 图：1.邻接表转为邻接矩阵
void Convert(ALGraph &G, int arcs[m][n])
{
	for(int i = 0; i < n; i++)
	{
		p = (G->v[i]).firstarc;
		while(p != NULL)
		{
			arcs[i][p->adjvex] = 1;
			p = p->nextarc;
		}
	}
}


// 图：2.求邻接矩阵中EL路径（包含所有边，且长度为边数）

int IsExistEL(MGraph G)
{
	int degree, i, j, count = 0;
	for(i = 0; i < G.numVertices; i++)
	{
		degree = 0;
		for(j = 0; j < G.numVertices; j++)
			degree += G.Edge[i][j];
		if(degree % 2 != 0)
			count++;
	}
	if(count == 0 || count == 2)
		return 1;
	else
		return 0;
}


// 图：3.判断一个无向图是否是一棵树（是否有n-1条边或无回路连通图）

bool isTree(Graph &G)
{
	for(int i = 1; i <= G.vexnum; i++)
	{
		visited[i] = FALSE;
	}
	int Vnum = 0, Enum = 0;
	DFS(G, 1, Vnum, Enum, visited);
	if(Vnum == G.vexnum && Enum == 2 * (G.vexnum - 1))
		return true;
	else
		return false;
}

// 深度优先遍历
void DFS(Graph &G, int v, int &Vnum, int &Enum, int visited[])
{
	visited[v] = TRUE; Vnum++;
	int w = FirstNeighbor(G, v);
	while(w != -1)
	{
		Enum++;
		if(!visited[w])
			DFS(G, w, Vnum, Enum, visited);
		w = NextNeighbor(G, v, w);
	}
}



// 图：4.图的深度优先遍历（邻接表存储图）
// 借助栈

void DFS_Non_RC(AGraph &G, int v)
{
	int w;
	SqStack S;
	InitStack(S);
	for(int i = 0; i < G.vexnum; i++)
	{
		visited[i] = FALSE;
	}
	Push(S, v);visited[v] = TURE;
	while(!IsEmpty(S))
	{
		k = Pop(S);
		visit(k);
		for(w = FirstNeighbor(G, k); k >= 0; w = NextNeighbor(G, k, w))
		{
			if(!visited[w])
			{
				Push(S, w);
				visited[w] = TRUE;
			}
		}
	}
}


// 图：5.判断一个有向图是否存在从v到k的路径
// 深度优先遍历
int visited[MAXSIZE] = {0};
void DFS(ALGraph G, int i, int j, bool &can_reach)
{
	if(i == j)
	{
		can_reach = true;
		return;
	}
	visited[i] = 1;
	for(int p = FirstNeighbor(G, i); p >= 0; p = NextNeighbor(G, i, p))
	{
		if(!visited[p] && !can_reach)
			DFS(G, p, j, can_reach);
	}
}

// 广度优先遍历(层序遍历思想)
int BFS(ALGraph G, int i, int j)
{
	InitQueue(Q); EnQueue(Q, i);
	while(!isEmpty(Q))
	{
		DeQueue(Q, u);
		visited[u] = 1;
		if(u == j) return 1;
		for(int p = FirstNeighbor(G, i); p; p = NextNeighbor(G, u, p))
		{
			if(p == j)
				return 1;
			if(!visited[p])
			{
				EnQueue(Q, p);
				visited[p] = 1;
			}
		}
	}
	return 0;
}


// 图：6.邻接表中，输出u到v的简单路径(所有顶点不重复)

void FindPath(AGraph *G, int u, int v, int path[], int d)
{
	int w, i;
	ArcNode *p;
	d++;
	path[d] = u;
	visited[u] = 1;
	if(u == v)
		print(path[]);
	p = G->adjlist[u].firstarc;
	while(p != NULL)
	{
		w = p->adjvex;
		if(visited[w] == 0)
			FindPath(G, w, v, path, d);
		p = p->nextarc;
	}
	visited[u] = 0;
}



// 图：7. 用深度优先遍历对有向无环图进行拓扑排序

bool visited[MAX_VERTEX_NUM];
void DFSTraverse(Graph G)
{
	for(int v = 0; v < G.vexnum; v++)
		visited[v] = FALSE;
	time = 0;
	for(int v = 0; v < G.vexnum; ++v)
	{
		if(!visited[v]) DFS(G, v);
	}
}

void DFS(Graph G, int v)
{
	visited[v] = TRUE;
	visit(v);
	for(w = FirstNeighbor(G, v); w >= 0; w = NextNeighbor(G, v, w))
	{
		if(!visited[w])
		{
			DFS(G, w);
		}
	}
	time = time + 1; finishTime[v] = time;
}




#############################################################
