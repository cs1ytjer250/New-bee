// 排序：1.二分查找递归算法

int Binary_SearchR(SSTable ST, int key,int left, int right)
{
	if(left > right)
		return 0;
	int mid = (right - left) / 2;
	if(ST.elem[left] < key)
		return Binary_SearchR(ST, key, mid + 1, right);
	else if(ST.elem[left] > key)
		return Binary_SearchR(ST, key, left, mid - 1);
	else
		return mid;
}	




// 排序：2.为提高查找效率，每次将所查元素和前一个元素交换
int SeqSrch(RcdType R[], int k)
{
	int i = 0;
	while((R[k].key != k) && (i < n))
	{
		i++;
	}
	if(i < n && i > 0)
	{
		temp = R[i].key;
		R[i].key = R[i - 1].key;
		R[i - 1].key = temp;
		return --i;
	}
	else
		 return -1;
}



// 排序：3.判断一棵二叉树是否是二叉排序树
int predt = -312654;

int JudgeBST(BiTree bt)
{
	int b1, b2;
	if(bt == NULl)
		return 1;
	else
	{
		b1 = JudgeBST(bt->lchild);
		if(b1 == 0 || predt >= bt->data)
			return 0;
		predt = bt->data;
		b2 = JudgeBST(bt->rchild);
		return b2;
	}
}



// 排序：4.计算指定节点所在二叉排序的层次
int level(BiTree bt, BSTNode *p)
{
	int n = 0;
	BiTree t = bt;
	if(bt != NULL)
	{
		n++;
		while(t->data != p->data)
		{
			if(p->data < t->data)
				t = t->lchild;
			else
				t = t->rchild;
			n++;
		}
	}
	return n;
}


// 排序：5.判断二叉树是否是平衡二叉树（后序遍历）

void Judge_AVL(BiTree bt, int &balance, int &h)
{
	int bl = 0, br = 0, hl = 0, hr = 0;
	if(bt == NULL)
	{
		h = 0;
		balance = 1;
	}
	else if(bt->lchild == NULL && bt->rchild == NULL)
	{
		h = 1;
		balance = 1;
	}
	else
	{
		Judge_AVL(bt->lchild, bl, hl);
		Judge_AVL(bt->rchild, br, hr);
		h = (hl > hr ? hl : hr) + 1;
		if(abs(hl - hr) < 2)
			balance = bl && br;
		else
			balance = 0;
	}
}



// 排序：6.找出二叉排序树中的最大和最小值

int MinKey(BSTNode *bt)
{
	while(bt->lchild != NULL)
		bt = bt->lchild;
	return bt->data;
}

int MaxKey(BSTNode *bt)
{
	while(bt->rchild != NULL)
		bt = bt->rchild;
	return bt->data;
}



// 排序：7.降序输出二叉排序树中值大于k的节点

void OutPut(BSTNode *bt, int k)
{
	if(bt == NULL)
		return ;
	if(bt->rchild != NULL)
		OutPut(bt->rchild, k);
	if(bt->data >= k)
		cout << bt->data << endl;
	if(bt->lchild != NULL)
		OutPut(bt->lchild, k);
}




// 排序：8.找出二叉排序树中第k小的元素

BSTNode *Search_Small(BSTNode *t, int k)
{
	if(k < 1 || k > t->count) return NULL;
	if(t->lchild == NULL)
	{
		if(k == 1) return t;
		else return Search_Small(t->rchild, k-1);
		
	}
	else
	{
		if(t->lchild->count == k - 1) return t;
		if(t->lchild->count > k - 1) return Search_Small(t->lchild, k);
		if(t->lchild->count < k - 1) return Search_Small(t->rchild, k - (t->lchild->count + 1));
	}
}




// 排序：1.双向起泡

void BubbleSort(int a, int n)
{
	int low = 0, high = n-1;
	bool flag = true;
	while(low < high && flag)
	{
		flag = false;
		for(i = low; i < high; i++)
		{
			if(a[i] > a[i + 1])
			{
				swap(a[i], a[i + 1])
					flag = true;
			}
		}
		high--;
		for(i = high; i > low; i--)
		{
			if(a[i] < a[i - 1])
			{
				swap(a[i], a[i - 1]);
				flag = true;
			}
		}
		low++;
	}
}


// 排序：2.排序顺序线性表，奇数在前，偶数在后
void move(int a[], int len)
{
	int i = 0, j = len - 1;
	while(i < j)
	{
		while(i < j && a[i] % 2 != 0) i++;
		while(i < j && a[j] % 2 != 1) j++;
		if(i < j)
		{
			swap(a[i], a[j]);
			i++;
			j--;
		}
	}
}



// 排序：3.快排对枢轴进行随机挑选
int Partition2(int a[], int low, int high)
{
	int rand_index = low + rand() % (high - low + 1);
	swap(a[rand_index], a[low]);
	int pivot = a[low];
	int i = low;
	for(int j = low + 1; j <= high; j++)
	{
		if(a[j] < pivot)
			swap(a[++i], a[j]);
	}
	swap(a[i], a[low]);
	return i;
}


// 排序：4.找出第k小的元素

int kth_elem(int a[], int low, int high, int k)
{
	int pivot = a[low];
	int low_temp = low;
	int high_temp = high;
	while(low < high)
	{
		while(low < high && a[high] >= pivot)
			--high;
		a[low] = a[high];
		while(low < high && a[low] <= pivot)
			++low;
		a[high] = a[low];
	}
	a[low] = pivot;
	if(low == k)
		return a[low];
	else if(low > k)
		return kth_elem(a, low_temp, low - 1, k);
	else 
		return kth_elem(a, low + 1, high_temp, k);
}



// 排序：5.荷兰国旗

typedef enum{red, white, blue} color;
void flag_arrange(color a[], int n)
{
	int i = 0, j = 0, k = n-1;
	while(j <= k)
	{
		switch(a[j])
		{
			case red: swap(a[i], a[j]); i++; j++; break;
			case white: j++; break;
			case blue: swap(a[i], a[k]); k--;
		}
	}
}




// 排序：6.将n个正整数分为a1和a2，且n1-n2最小，a1的和-a2的和最大(绝对值)

int setPartition(int a[], int n)
{
	int pivotkey, low = 0, low0 = 0, high = n-1, high0 = n-1, flag = 1, k = n/2, i;
	int s1 = 0, s2 = 0;
	while(flag)
	{
		pivotkey = a[low];
		while(low < high)
		{
			while(low < high && a[high] >= pivotkey) --high;
			if(low != high) a[low] = a[high];
			while(low < high && a[low] <= pivotkey) ++low;
			if(low != high) a[high] = a[low];
		}
		a[low] = pivotkey;
		if(low == k-1)
			flag = 0;
		else
		{
			if(low < k-1)
			{
				low0 = ++low;
				high = high0;
			}
			else
			{
				high0 = --high;
				low = low0;
			}
		}
	}
	for(i = 0; i < k; i++) s1 += a[i];
	for(i = k; i < n; i++) s2 += a[i];
	return s2 - s1;
}



// 排序：7.简单选择排序（递增）
void selectSort(LinkList &L)
{
	LinkNode *h = L, *p, *q, *r, *s;
	L = NULL;
	while(h != NULL)
	{
		p = s = h; q = r = NULL;
		while(p != NULL)
		{
			if(p->data > s->data){s = p; r = q;}
			q = p; p = p->link;
		}
		if(s == h)
			h = h->link;
		else
			 r->link = s->link;
		s->link = L; L = s;
	}
}



// 排序：8.判断一个顺序表是否构成小根堆

bool IsMinHeap(int a[], int len)
{
	if(len % 2 == 0)
	{
		if(a[len / 2] > a[len])
			return false;
		for(int i = len / 2 - 1; i >= 1; i--)
		{
			if(a[i] > a[2 * i] || a[i] > a[2 * i + 1])
				return false;
		}
	}
	else
	{
		for(int i = len / 2; i >= 1; i--)
		{
			if(a[i] > a[2 *i] || a[i] > a[2 * i + 1])
				return false;
		}
	}
	return true;
}



// 排序：9.对一个数组进行排序，数组前m个元素递增，后n个元素递增

void Insert_Sort(int a[], int m, int n)
{
	int i, j;
	for(i = m+1; i <= m+n; i++)
	{
		a[0] = a[i];
		for(j = i - 1; a[j] > a[0]; j--)
			a[j+1] = a[j];
		a[j+1] = a[0];
	}
}


// 排序：11.快排
int Partition(int k[], int n)
{
	int i = 1, j = n;
	int pivot = k[j];
	while(i < j)
	{
		while(i < j && k[i] <= pivot)
			i++;
		if(i < j)
			k[j] = k[i];
		while(i < j && k[j] >= pivot)
			j--;
		if(i < j)
			k[i] = k[j];
	}
	k[i] = pivot;
	return i;
}



// 交换元素
void swap(int k, int j)
{
	int temp = k;
	k = j;
	j = temp;
}

// 二叉排序树：创建
void Creat_BST(BiTree &T, int srt[], int n)
{
	T == NULL;
	int i = 0;
	while(i < n)
	{
		BST_Insert(T, srt[i]);
		i++;
	}
}