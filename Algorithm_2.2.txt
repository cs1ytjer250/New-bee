// 线性表：1.删除最小元素
bool Del_Min(SqList &L, int &value)
{
	if(L.length == 0)
	{
		return false;
	}
	value = L.data[0];
	int pos = 0;
	for(int i = 1; i < L.length; i++)
	{
		
		if(L.data[i] < value)
		{
			value = L.data[i];
			pos = i;
		}
	}
	L.data[pos] = L.data[L.length - 1];
	L.length--;
	return true;
}


// 线性表：2.逆置线性表
void Reverse(SqList &L)
{
	int temp;
	for(int i = 0; i < L.length / 2; i++)
	{
		temp = L.data[i];
		L.data[i] = L.data[L.length - i - 1];
		L.data[L.length - i - 1] = temp;
	}
}



// 线性表：3.删除所有值为x的节点

void Del_k_1(SqList &L, int k)
{
	int x = 0, i;
	for(i = 0; i < L.length; i++)
	{
		if(L.data[x] != k)
		{
			L.data[x] = L.data[i];
			x++;
		}
	}
	L.length = x;
}

void Del_x_2(SqList &L, int x)
{
	int k = 0, i = 0;
	while(i < L.length)
	{
		if(L.data[i] == x)
			k++;
		else
			L.data[i - k] = L.data[i];
		i++
	}
	L.length = L.length - k;
}



// 线性表：4.删除有序表中介于s和t之间的所有元素

bool Del_s_t3(SqList &L, int s, int t)
{
	int i, j;
	if(s >= t || L.length == 0)
		return false;
	for(i = 0; i < L.length && L.data[i] < s; i++);
	if(i >= L.length)
		return false;
	for(j = i; j < L.length && L.data[j] <= t; j++);
	for(; j < L.length; i++, j++)
		L.data[i] = L.data[j];
	L.length = i;
	return true;
}


// 线性表：5.删除顺序表中介于s和t之间的所有元素

bool Del_s_t2(SqList &L, int s, int t)
{
	if(s >= t || L.length == 0)
		return false;
	int i, k;
	for(i = 0; i < L.length; ++)
	{
		if(L.data[i] >= s && L.data[i] <= t)
			k++;
		else
			L.data[i - k] = L.data[i];
	}
	L.length = k;
	return true;
}


// 线性表：6.删除有序顺序表中重复的元素
bool Del_Same(SqList &L)
{
	int i, j;
	k = L.data[0];
	if(L.length == 0)
		return false;
	for(i = 0, j = 1; i < L.length; j++)
	{
		if(L.data[i] != L.data[j])
			L.data[++i] = L.data[j];
	}
	L.length = i + 1;
	return true;
}


// 线性表：7.合并两个顺序表
bool Merge(SqList L1, SqList L2, SqList &L3)
{
	if(L1.length + L2.length > L3.length)
		return false;
	int i = 0, j = 0, k = 0;
	while(i < L1.length && j < L2.length)
	{
		if(L1.data[i] <= L2.data[j])
			L3.data[k++] = L1.data[i++];
		else
			L3.data[k++] = L2.data[j++];
	}
	while(i < L1.Length) L3.data[k++] = L1.data[i++];
	while(j < L2.length) L3.data[k++] = L2.data[j++];
	L3.length = k;
	return true;
}



// 线性表：8.将顺序表前半部分元素和后半部分元素对换

bool Reverse(int a[], int left, int right, int arraySize)
{
	if(left > right || right >= arraysize)
		return false;
	int mid = (left + right) / 2;
	for(int i = 0; i <= mid - left ; i++)
	{
		int temp = a[left + i];
		a[left + i] = a[right - i];
		a[right - i] = temp;
	}
}

void Exchange(int a[], int m, int n, int arraysize)
{
	Reverse(a, 0, m + n - 1, arraysize);
	Reverse(a, 0, n - 1, arraysize);
	Reverse(a, n, m + n - 1, arraysize);
}



// 线性表：9.顺序表中查找x，找到后将x和后继元素交换，没找到则插入x

void SearchExchangeInsert(SqList &L, int x)
{
	int low = 0, high = L.length - 1, mid, t;
	while(low < high)
	{
		mid = (low + high) / 2;
		if(L.data[mid] == x) break;
		else if(L.data[mid] < x) low = mid + 1;
		else high = mid - 1;
	}
	if(L.data[mid] == x && mid != n - 1)
	{
		t = L.data[mid];
		L.data[mid + 1] = L.data[mid];
		L.data[mid] = t;
	}
	if(low > high)
	{
		for(i = n - 1; i > high; i--) L.data[i + 1] = L.data[i];
		L.data[i + 1] = x;
	}
}



// 线性表：10.循环左移N个位置
void Reverse(int r[], int from, int to)
{
	int temp, i;
	for(i = 0; i < (to - from + 1) / 2; i++)
	{
		temp = r[from + i];
		r[from + i] = r[to - i];
		r[to - i] = temp;
	}
}

void Converse(int r[], int n, int p)
{
	Reverse(r, 0, p - 1);
	Reverse(r, p, n - 1);
	Reverse(r, 0, n - 1);
}



// 线性表：11.求两个数组的中位数

int M_Search(int a[], int b[], int n)
{
	// 分别表示序列a和b的，首位数，末尾数，中位数
	int s1 = 0, d1 = n - 1, m1, s2 = 0, d2 = n - 1, m2;
	while(s1 != d1 || s2 != d2)
	{
		m1 = (s1 + d1) / 2;
		m2 = (s2 + d2) / 2;
		if(a[m1] == b[m2])
			return a[m1];
		if(a[m1] < b[m2])
		{
			if((s1 + d1) % 2 == 0)
			{
				s1 = m1;
				d2 = m2;
			}
			else
			{
				s1 = m1 + 1;
				d2 = m2;
			}
		}
		else
		{
			if((s2 + d2) % 2 == 0)
			{
				d1 = m1;
				s2 = m2;
			}
			else
			{
				d1 = m1;
				s2 = m2 + 1;
			}
		}
	}
	return a[s1] < b[s2] ? a[s1] : b[s2];
}



// 线性表：12.找出整数数组中的众数，且众数的个数> n/2

bool Mode(int a[], int n)
{
	int i, c, count = 1;
	c = a[0];
	for(i = 1; i < n; i++)
	{
		if(a[i] == c)
			count++;
		else
		{
			if(count > 0)
				count--;
			else
			{
				c = a[i];
				count = 1;
			}
		}
	}
	if(count > 0)
	{
		for(i = count = 0; i < n; i++)
		{
			if(a[i] == c)
				count++;
		}
	}
	if(count > n/2 ) return c;
	else return -1;
}



// 线性表：13.找出整数数组中未出现的最小正整数

int findMissMin(int a[], int n)
{
	int i, *b;
	b = (int *)malloc(sizeof(int) * n);
	memset(b, 0, sizeof(int) * n);
	for(i = 0; i < n; i++)
	{
		if(a[i] > 0 && a[i] < n)
			b[a[i]-1] = 1;
	}
	for(i = 0; i < n; i++)
	{
		if(b[i] == 0) break;
	}
	return i + 1;
}



// 线性表：14.三元组中最小距离

bool xls_min(int a, int b, int c)
{
	if(a <= b && a <= c) return true;
	else
		return false;
}


int findMinofTrip(int a[], int n, int b[], int m, int c[], int p)
{
	int i = 0, j = 0, k = 0, d_min = INT_MAX, d;
	while(i < n && j < m && k < p && d_min > 0)
	{
		d = abs(a[i] - b[j]) + abs(b[j] - c[k]) + abs(a[i] - c[k]);
		if(d < d_min) d_min = d;
		if(xls_min(a[i], b[j], c[k])) i++;
		else if(xls_min(b[j], c[k], a[i])) j++;
		else k++;
	}
	return d_min;
}