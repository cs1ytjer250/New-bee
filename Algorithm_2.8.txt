// 树：3.求二叉树高度，非递归

int Btdepth(BiTree T)		// 形参：根节点
{
	if(!T)			// 判断是否为空树
		return 0;
	int front = -1, rear = -1;	// 创建一个队列
	int last = 0, level = 0;         // last：当前层所有孩子的数量，level：层级
	BiTree Q[MaxSize];
	Q[++rear] = T;		// 根节点入队
	BiTree p;
	while(front < rear)		// 当front小于rear，进入循环
	{
		p = Q[++front];	// 出队队头节点
		if(p->lchild)	// 如果队头节点有左右孩子，则将其入队
			Q[++rear] = p->lchild;
		if(p->rchild)
			Q[++rear] = p->rchild;
		if(front == last)   // 如果front等于last，则level加1，更新last
		{
			level++;
			last = rear;
		}
	}
	return level;		// 返回层级
}

// 解法2：递归

int Btdepth2(BiTree T)		// 形参：根节点
{
	if(T == NULL)		// 根节点不为空，进入递归
		return 0;
	ldep = BtDepth2(T->lchild);	// 左子树高度
	rdep = BtDepth2(T->rchild);	// 右子树高度
	if(ldep > rdep)		// 左右子树，更高的一方加1，并返回。
		return ldep + 1;
	else
		return rdep + 1;
}



// 树：4.通过先序和后序，构建二叉树

BiTree PreInCreat(char a[], char b[], int l1, int h1, int l2, int h2)
// 形参：先序数组，中序数组，先序其实下标，先序结束下标，中序起始**，中序结束**
{
	root = (BiTNode *)malloc(sizeof(BiTNode));	// 声明根节点
	root->data = a[l1];		// 根节点为先序序列的第一个节点
	for(i = l2; b[i] = ! root->data; i++);	// 找到根节点所在中序的位置
	llen = i - l2;			// 计算左子树数量
	rlen = h2 - i;			// 右子树数量
	
	// 当左子树数量不为0，进入递归
	if(llen)
	{
// 递归参数：（先序，中序，先序起始右移一位，先序起始加llen，中序起始，中序起始加llen-1）
// 构建范围为先序数组起始下标右移一位（跳过根节点），到先序数组的l1加llen的位置
// 中序数组：l2到l2加llen - 1（提过根节点）
// 不停的递归调用这个范围构建左子树。
		root->lchild = PreInCreat(a, b, l1+1, l1 + llen, l2, l2+llen-1);
	}

	// 构建完毕，将叶子节点的左孩子置空
	else
	{
		root->lchild = NULL;
	}
	
	// 当右子树数量不为0，进入递归
	if(rlen)
	{
// 构建范围为：先序的h1-rlen（结束下标减右子树的数量），到结束下标
// 中序：结束下标h2-rlen + 1（跳过根节点），到结束下标
// 递归调用该范围，构建右子树。
		root->rchild = PreInCreat(a, b, h1-rlen, h1, h2-rlen+1, h2);
	}

	// 构建完毕，将叶子节点的右孩子置空
	else
	{
		root->rchild = NULL;
	}
	return root;	// 返回根节点
}



// 树：5.判断二叉链表是否是完全二叉树
bool IsComplete(BiTree T)		// 形参：根节点
{
	InitQueue(Q);		// 初始化队列，并将根节点入队
	if(!T)		// 判断树是否为空
		return 1;
	EnQueue(Q, T);
	while(!IsEmpty(Q))	// 当队列不空时，进入循环
	{
		DeQueue(Q, p);	// 出队队头节点
		if(p)		// 如果队头节点不为空，则将左右孩子如果
		{
			EnQueue(Q, p->lchild);
			EnQueue(Q, p->rchild);
		}
		else		// 如果为空，进入循环判断。
		{
			// 如果出队的元素，不为空则该数不是完全二叉树。
			while(!IsEmpty(Q))
			{
				DeQueue(Q, p);
				if(p)
					return 0;
			}
		}
	}
}



// 树:6.计算二叉链表所有双分支个数

int DsonNodes(BiTree b)		// 形参：根节点
{
	if(b == NULL)		// 根节点为空，返回0
		return 0;
	// 如果为叶子节点，返回左孩子和右孩子相加再加1
	else if(b->lchild != NULL && b->rchild != NULL)
		return DsonNodes(b->lchild) + DsonNodes(b->rchild) + 1;
	else	// 不是叶节点，返回左孩子和右孩子相加
		return DsonNodes(b->lchild) + DsonNodes(b->rchild);
}



// 树：7.交换左右孩子
void swap(BiTree p)		// 形参：根节点
{
	if(b)		// 如果根节点不为空，进入递归
	{
		swap(b->lchild);	// 交换左子树
		swap(b->rchild);	// 交换右子树

		// 交换逻辑
		temp = b->lchild;	
		b->lchild = b->rchild;
		b->rchild = temp;
	}
}



// 树：8.先序遍历中第k个节点

int i = 1;				// 全局变量i
int PreNode(BiTree b, int k)		// 形参：根节点，k
{
	if(b == NULL)		// 节点为空，返回特定字符
		return '#';
	if(i == k)			// i值和k相等，返回该节点的data域
		return b->data;
	i++;			// 每调用过一个节点，i加1
	ch = PreNode(b->lchild, k);	// 递归左子树
	if(ch != '#')		// 如果返回的结果不是data域，则表明未找到
		return ch;
	ch = PreNode(b->rchild, k)	// 开始递归右子树
		return ch;
}



// 树：9.删去以X为根的节点

// 删除函数
void DeleteXTree(BiTree &bt)
{
	if(bt)	// 当节点不为空，先走到该节点的最下层，开始一层一层向上删除
	{
		DeleteXTree(bt->lchild);
		DeleteXTree(bt->rchild);
		free(bt);
	}
}

void Search(BiTree bt, int x)	// 形参：根节点，X
{
	BiTree Q[];	// 声明队列
	if(bt)		// 当根节点不空，开始进入递归
	{
		// 如果根节点恰好是所求节点，直接调用删除
		if(bt->data == x)
		{
			DeleteXTree(bt);
			exit(0);
		}

		// 初始化队列，并将根节点入队
		InitQueue(Q);
		EnQueue(Q, bt);

		// 当队列不空时，进入循环扫描
		while(!IsEmpty(Q))
		{
			DeQueue(Q, p);	// 队头元素出队
			if(p->lchild)	// 队头元素有左孩子
			{
				// 先判断左孩子是否是所求节点
				if(p->lchild->data == x)
				{
					DeleteXTree(p->lchild);
					// 当删除完毕后，将左孩子置空
					p->lchild = NULL；
				}
				// 不是所求节点继续往下。
				else
				{
					EnQueue(Q, p->lchild);
				}
			}
			
			// 和左孩子相同。
			if(p->rchild)
			{
				if(p->rchild->data == x)
				{
					DeleteXTree(p->rchild);
					p->rchild == NULL;
				}
				else
				{
					EnQueue(Q, p->rchild);
				}
			}
		}
	}
}




// 树：10.查找x，并输出它的祖先

void Search(BiTree bt, int x)		// 形参：根节点，x
{
	stack s[];			// 声明栈
	top = 0;
	while(bt != NULL || top > 0)	// 根基节点不为空，或栈不为空
	{
		while(bt != NULL && bt->data != x)	// 节点的data域不等于X，入栈，并向下走。
		{
			s[++top].t = bt;
			s[top].tag = 0;
			bt = bt->lchild;
		}
		// 找到了X节点，输出栈中所有元素。
		if(bt != NULL && bt->data == x)
		{
			printf("所查节点的所有祖先节点的值为：\n");
			// 这里输出栈中节点，是从栈底开始的，有点没想明白
			for(i = 1; i <= top; i++)
			{
				printf("%d", s[i].t->data);
				exit(1);
			}
		}
		// 当左右子树都被访问过时，开始往回走
		while(top != 0 && s[top].tag == 1)
			top--;
		// 访问右子树。
		if(top != 0)
		{
			s[top].tag = 1;
			bt = s[top].t->rchild;
		}
	}
}




// 树：11.找到公共节点

BiTree Ancestor(BiTree ROOT, BiTNode *p, BiTNode *q)
{
	top = 0; bt = ROOT;
	while(bt != NULL || top > 0)
	{
		while(bt != NULL)
		{
			s[++top].t = bt;
			s[top].tag = 0;
			bt = bt->lchild;
		}
		while(top != 0 && s[top].tag == 1)
		{
			if(s[top].t == p)
			{
				for(i = 1; i <= top; i++)
				{
					s1[i] = s[i];
					top1 = top;
				}
			}
			if(s[top].t == q)
			{
				for(i = top; i > 0; i--)
				{
					for(j = top1; j > 0; j--)
					{
						if(s1[j].t == s[i].t)
							return s[i].t
					}
				}
			}
			top--;
		}
		if(top != 0)
		{
			s[top].tag = 1;
			bt = s[top].t->rchild;
		}
	}
	return NULL;
}



// 树：12.求宽度

int BTWidth(BiTree b)
{
	BiTree p;
	int k, max, i, n;
	Qu.front = Qu.rear = -1;
	Qu.rear++;
	Qu.data[Qu.rear] = b;
	Qu.level[Qu.rear] = 1;
	while(Qu.front < Qu.rear)
	{
		Qu.front++;
		p = Qu.data[Qu.front];
		k = Qu.level[Qu.front];
		if(p->lchild != NULL)
		{
			Qu.rear++;
			Qu.data[Qu.rear] = p->lchild;
			Qu.level[Qu.rear] = k + 1;
		}
		if(p->rchild != NULL)
		{
			Qu.rear++;
			Qu.data[Qu.rear] = p->rchild;
			Qu.level[Qu.rear] = k + 1;
		} 
	}
	max = 0; i = 0;
	k = 1;
	while(i <= Qu.rear)
	{
		n = 0;
		while(i <= Qu.rear && Qu.level[i] == k)
		{
			n++;
			i++;
		}
		k = Qu.level[i];
		if(n > max) max = n;
	}
	return max;
}



// 树：13.通过满二叉树的前序，求其后序

void PreToPost(char pre[], int l1, int h1, int post[], int l2, int h2)
{
	int half;
	if(h1 >= l1)
	{
		post[h2] = pre[l1];
		half = (h1 - l1) / 2;
		PreToPost(pre, l1 + 1, l1 + half, post, l2, l2 + half - 1);
		PreToPost(pre, l1 + half + 1, h1, post, l2 + half, h2 -1);
	}
}



// 树：14.将二叉树叶节点连成单链表

LinkList InOrder(BiTree bt)
{
	if(bt)
	{
		InOrder(bt->lchild);
		if(bt->lchild == NULL && bt->rchild == NULL)
		{
			if(pre == NULL)
			{
				head = bt;
				pre = bt;
			}
			else
			{
				pre->rchild = bt;
				pre = bt;
			}
		}
		InOrder(bt->rchild);
		pre->rchild = NULL;
	}
	return head;
}



// 树：15.判断两颗二叉树是否相似

int similar(BiTree T1, BiTree T2)
{
	int leftS, rightS;
	if(T1 == NULL && T2 == NULL)
		return 1;
	else if(T1 == NULL || T2== NULL)
		return 0;
	else
	{
		leftS = similar(T1->lchild, T2->lrchild);
		rightS = similar(T1->rchidl, T2->rchild);
		return leftS && rightS;
	}
}



// 树：16.查找线索二叉树的后序前驱
BiThrTree InPostPre(BiThrTree t, BiThrTree p)
{
	BiThrTree q;
	if(p->rtag == 0)
		q = p->rchild;
	else if(p->ltag == 0)
		q = p->lchild;
	else if(p->lchild == NULL)
		q = NULL;
	else
	{
		while(p->ltag == 1 && p->lchild != NULL)
		{
			p = p->lchidl;
		}
		if(p->ltag == 0)
			q = p->lchild;
		else
			q = NULL;
	}
	return q;
}



// 树：17.求二叉链表的带权路径长度（wpl）
int WPL(BiTree root)
{
	return wpl_PreOrder(root, 0)
}
int wpl_PreOrder(BiTree root, int deep)
{
	static int wpl = 0;
	if(root->lchild == NULL && root->rchild == NULL)
		wpl += deep * root->weight;
	if(root->lchild != NULL)
		wpl_PreOrder(root->lchild, deep + 1);
	if(root->rchild != NULL)
		wpl_PreOrder(root->rchild, deep + 1);
	return wpl;
}



// 树：18.将表达式树，转换为对应的表达式

void BtreeToE(BTree *root)
{
	BtreeToExp(root, 1);
}

void BtreeToExp(BTree *root, int deep)
{
	if(root == NULL) return;
	else if(root->left == NULL && root->right == NULL)
		printf("%s", root->data);
	else
	{
		if(deep > 1) printf("(");
		BtreeToExp(root->left, deep +1);
		printf("%s", root->data);
		BtreeToExp(root->right, deep + 1);
		if(deep > 1) printf(")");
	}
}



// 树：19.求孩子兄弟表示存储的叶子节点数

typedef struct node
{
	int data;
	struct node *fch, *nsib;
}*Tree;

int Leaves(Tree t)
{
	if(t == NULL)
		return 0;
	if(t->fch == NULL)
		return 1 + Leaves(t->nsib);
	else
		return Leaves(t->fch) + Leaves(t->nsib);
}



// 树：20.求孩子兄弟表示法的树深度
int Height(CSTree bt)
{
	int hc, hs;
	if(bt == NULL)
		return 0;
	else
	{
		hc = Height(bt->firstchild);
		hs = Height(bt->nextsibling);
		if(hc + 1 > hs)
			return hc + 1;
		else
			return hs;
	}
}



// 树：21.根据层序和度，构建孩子兄弟链表

void createCSTree_Degree(CSTree &T, char e[], int degree[], int n )
{
	CSNode *pointer = new CSNode[maxNodes];
	int i, j, d, k = 0;
	for(i = 0; i < n; i++)
	{
		pointer[i]->data = e[i];
		pointer[i]->lchild = pointer[i]->rsibling = NULL;
	}
	for(i = 0; i < n; i ++)
	{
		d = degree[i];
		if(d)
		{
			k++;
			pointer[i]->lchild = pointer[k];
			for(j = 2; j <= d; j++)
			{
				k++;
				pointer[k-1]->rsibling = pointer[k];
			}
		}
	}
	T = pointer[0];
	delete[] pointer;
}