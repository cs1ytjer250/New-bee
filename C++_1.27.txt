#include <iostream>
using namespace std;


// 函数占用参数
void func(int a, int)
{
	cout << "this is func" << endl;
}


int main()
{
	int a = 10;
	func(a, 10);
	return 0;
}


/*
// const:保证实参在调用的过程中不被修改
void showValue(const int & val)
{
	//val = 101;
	cout << "val = " << val << endl;
}


// 函数的默认参数
int add(int a, int b = 10, int c = 10)
{
	return a + b + c;
}

// 函数的声明有默认参数，则函数实现就不能有默认参数（反之亦然）
int func(int a = 10, int b = 10);

int main()
{
	int a = 2;
	int c = add(a);
	cout << c << endl;
	
	cout << func() << endl;
	
	
	
	
	int a = 100;
	showValue(a);
   	cout << a << endl;

	
   	return 0;
}


int func(int a, int b)
{
	return a + b;
}

/*




// 函数的重载:
// 1，同一作用域
// 2.函数名相同
// 3.函数的参数类型不同，参数个数不同，参数顺序不同
void func()
{
	cout << "func 的调用" << endl;
}

void func(int a)
{
	cout << "func(int a) 的调用" << endl;
}

void func(int a, double b)
{
	cout << "func(int a, double b)的调用" << endl;
}

void func(double a, int b)
{
	cout << "func(double a, int b)的调用" << endl;
}

int main()
{
	func();
	func(10);
	func(1, 3.1);
	func(3.1, 1);
  	return 0;
}



// 函数重载的注意事项
void func(int &a)
{
	cout << "func（int &a） 的调用" << endl;
}

void func(const int &a)			// const int &a == (const int &a = 10);
{
	cout << "func（const int &a） 的调用" << endl;
}


// 函数重载遇到默认参数
void func2(int a )
{
	cout << "func2(int a )的调用" << endl;
}

void func2(int a, int b = 10)
{
	cout << "func2(int a, int b = 10)的调用" << endl;
}

int main()
{
	//func2(10); // error
	func2(10, 123);	 // correct
	
	/*
	int a = 10;
	const int &b = 10;
	func(a);
	func(1);
	*/
   	return 0;
}






const float pi = 3.14;

// 类
class Circle
{
public:
	// 属性
	int m_r;
	

	// 行为
	double calculateZC()
	{
		return 2 * pi * m_r;
	}
};


int main()
{
	Circle c1;
	c1.m_r = 5;
	double zc = c1.calculateZC();
	cout << "圆的周长为：" << zc << endl;
   	return 0;
}


class Stu
{
public:
	string m_name;
	int m_age;
	
	void Print()
	{
		cout << "学生：" << m_name << '\t' << "年龄：" << m_age << endl;
	}
	
	void setName(string name)
	{
		m_name = name;
	}
	
	void setAge(int age)
	{
		m_age = age;
	}
};


int main()
{
   	Stu s1;
	s1.setName("李四");
	s1.setAge(35);
	s1.Print();
   	return 0;
}




// 类的权限
// 公共权限 public		// 成员 类内可以访问，类外也可以访问
// 保护权限 protected	// 成员 类内可以访问，类外不可以访问
// 私有权限 private		// 成员 类内可以访问，类外不可以访问

class Person
{
public:
	string name;
protected:
	string m_Car;
private:
	int m_Password;
public:
	void Init()
	{
		name = "赵六";
		m_Car = "奔驰";
		m_Password = 123456;
	}
};



int main()
{
   	Person s1;
	s1.name = "王五";
	s1.Init();
	//s1.m_Car = "拖拉机";			// Error : 保护权限，类外禁止访问
	//s1.m_Password = 3125;			//Error : 私有权限，类外禁止访问
   	return 0;
}