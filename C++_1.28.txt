// class 和 struct的区别：访问权限的不同
class C1			// 默认为私有
{
	int m_a;
};

struct S1			// 默认为公有
{
	int m_a;
};



int main()
{
   	C1 c1;
	S1 s1;
	//c1.m_a = 10;
	s1.m_a = 10;
	cout << s1.m_a << endl;
   	return 0;
}




// 对私有权限的对外接口实现


class Person
{
public:
	void setName(string name)
	{
		m_name = name;
	}
	
	string getName()
	{
		return m_name;
	}
	
	int getAge()
	{

		return m_age;
	}
	
	void setAge(int age)
	{
		m_age = 0;
		if(age < 0 || age > 150)
		{
			cout << "年龄非法" << endl;
			return;
		}
		m_age = age;
	}
	
	
	void setHobby(string name)
	{
		m_hobby = name;
	}
	
	
	
	
private:
	string m_name;
	int m_age;
	string m_hobby;
};



int main()
{
   	Person p1;
	//p1.m_name = "张三";  // 私有属性无法外部修改
	p1.setName("李四");
	cout << "姓名： " << p1.getName() << endl;
	
	p1.setAge(-1);
	cout << "年龄： " << p1.getAge() << endl;
	
	p1.setHobby("打球");
	//cout << "爱好： " << p1.m_hobby << endl;
   	return 0;
}





// class综合运用


class Cube
{
public:
	void get_LWH(int l, int w, int h)
	{
		m_L = l;
		m_W = w;
		m_H = h;
	}
	
	int getL()
	{
		return m_L;
	}
	int getW()
	{
		return m_W;
	}
	int getH()
	{
		return m_H;
	}
	
	
	int Cal_area()
	{
		return ((m_L * m_W) * 2) + ((m_L * m_W) * 2) + ((m_W * m_H) * 2);
	}
	
	int Cal_volume()
	{
		return m_L * m_W * m_H;
	}
	
	
	
	bool isSameByClass(Cube c)
	{
		if(m_L == c.getL() && m_W == c.getW() && m_H == c.getH())
			return true;
		else
			return false;
	}
	
	
private:
	int m_L;
	int m_W;
	int m_H;
	

};

bool isSame(int a, int b)
{
	if(a == b)
		return true;
	else
		return false;
}
	


int main()
{
   	Cube cu, cu2;
	cu.get_LWH(5,5,5);
	cu2.get_LWH(5,5,5);
	int area = cu.Cal_area();
	int area2 = cu2.Cal_area();
	int volume = cu.Cal_volume();
	int volume2 = cu2.Cal_volume();
	cout << "立方体体积为: " << volume << endl;
	cout << "立方体面积为：" << area << endl;
	cout << "立方体2体积为: " << volume2 << endl;
	cout << "立方体2面积为：" << area2 << endl;
	if(cu.isSameByClass(cu2))
		cout << "相等" << endl;
	else
		cout << "不相等" << endl;
	
	bool ret = isSame(area, area2);
	if(ret)
		cout << "相等" << endl;
	else
		cout << "不相等" << endl; 
   	return 0;
}