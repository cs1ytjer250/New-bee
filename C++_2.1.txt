// 全局函数做友元
class Building
{
	friend void GoodGay(Building &building);
	
public:
	Building()
	{
		m_SittingRoom = "客厅";
		m_BedRoom = "卧室";
	}
	
public:
	string m_SittingRoom;
	
private:
	string m_BedRoom;
};

void GoodGay(Building &building)
{
	cout << "正在访问：" << building.m_SittingRoom << endl;
	
	cout << "正在访问：" << building.m_BedRoom << endl;
}

void test01()
{
	Building b;
	GoodGay(b);
}



// 类友元

class Building;
class GoodGay
{
public:
	GoodGay();
	
	void visit();
	
	Building *building;
	
};


class Building
{
	
	friend class GoodGay;
public:
	Building();
	
public:
	string m_SittingRoom;
	
private:
	string m_BedRoom;
};

// 类外编写类外成员
Building::Building()
{
	m_SittingRoom = "客厅";
	m_BedRoom = "卧室";
}

GoodGay::GoodGay()
{
	building = new Building;
}

void GoodGay::visit()
{
	cout << "正在访问：" << building->m_SittingRoom << endl;
	
	cout << "正在访问：" << building->m_BedRoom << endl;
}

void test01()
{
	GoodGay gg;
	gg.visit();
}





// 成员函数做友元
class Building;
class GoodGay
{
public:
	GoodGay();
	void visit();
	void visit2();

	
	Building *building;
};

class Building
{
	friend void GoodGay::visit2();
	friend void GoodGay::visit();
public:
	Building();

	
	string m_SittingRoom;
private:
	string m_BedRoom;
};

// 类外声明成员

Building::Building()
{
	m_SittingRoom = "客厅";
	m_BedRoom = "卧室";
}

GoodGay::GoodGay()
{
	building = new Building;
}

void GoodGay::visit()
{
	cout << "正在访问：" << building->m_SittingRoom << endl;
	cout << "正在访问：" << building->m_BedRoom << endl;
}


void GoodGay::visit2()
{
	cout << "正在访问：" << building->m_BedRoom << endl;
}

void test01()
{
	GoodGay gg;
	gg.visit();
	gg.visit2();
}




// 加号运算符重载

class Person
{
public:
	// 成员函数重载+号
	Person operator+(Person &p)
	{
		Person temp;
		temp.m_a = this->m_a + p.m_a;
		temp.m_b = this->m_b + p.m_b;
		return temp;
	}
	
	int m_a;
	int m_b;
};



// 全局函数重载+号

Person operator+(Person &p1, Person &p2)
{
	Person temp;
	temp.m_a = p1.m_a + p2.m_a;
	temp.m_b = p1.m_b + p2.m_b;
	return temp;
}

// 函数的重载（注意形参的类型/数量/顺序的区分）
Person operator+(Person &p1, int num)
{
	Person temp;
	temp.m_a = p1.m_a + num;
	temp.m_b = p1.m_b + num;
	return temp;
}

void test01()
{
	Person p1;
	Person p2;
	p1.m_a = 10;
	p1.m_b = 10;
	p2.m_a = 10;
	p2.m_b = 10;
	
	Person p3 = p1.operator+(p2);
	cout << p3.m_a << p3.m_b << endl;
	Person p4 = operator+(p1, 100);
	cout << p4.m_a << p4.m_b << endl;
}





// <<运算符重载

class Person
{
	friend ostream & operator<<(ostream &cout, Person &p);
	//friend void test01();
public:
	
	Person(int m_a, int m_b)
	{
		this->m_a = m_a;
		this->m_b = m_b;
	}
	
	/*
	void InitMember(int m_a, int m_b)
	{
		this->m_a = m_a;
		this->m_b = m_b;
	}
	*/
	
private:
	int m_a;
	int m_b;
};

// 只能利用全局函数重载<<号

ostream & operator<<(ostream &cout, Person &p)
{
	cout << "m_a: " << p.m_a << '\t' << "m_b" << p.m_b ;
	return cout;
}

void test01()
{
	Person p(12, 41);
	cout << p << endl;
}




// 递增运算符（++）重载


class MyInteger
{
	friend ostream &operator<<(ostream &cout, MyInteger &i);
public:
	MyInteger()
	{
		m_num = 0;
	}
	
	// 前置++
	MyInteger &operator++()
	{
		m_num++;
		return *this;
	}
	
	// 后置++（用int区分）
	MyInteger& operator++(int)
	{
		MyInteger *temp = new MyInteger(*this);
		//MyInteger temp = *this;
		m_num++;
		return *temp;
	}

private:
	int m_num;
};

ostream &operator<<(ostream &cout, MyInteger &i)
{
	cout << i.m_num;
	return cout;
}

void test01()
{
	MyInteger i;
	cout << ++(++i) << endl;

}

void test02()
{
	MyInteger myInt;
	//myInt++;
	cout << myInt++ << endl;

}