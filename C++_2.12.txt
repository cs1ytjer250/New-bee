// vector存放自定义数据类型

class Person
{
public:
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	
	string m_name;
	int m_age;
};


void test01()
{
	vector<Person> v;
	Person p1("aa", 15);
	Person p2("bb", 35);
	Person p3("cc", 25);
	Person p4("dd", 55);
	Person p5("ss", 25);
	
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);
	
	for(vector<Person>::iterator it = v.begin(); it != v.end(); it++)
	{
		//cout << "姓名： " << (*it).m_name << " 年龄： " << (*it).m_age << endl;
		cout << "姓名： " << it->m_name << " 年龄： " << it->m_age << endl;
	}
}

void test02()
{
	vector<Person*> v;
	Person p1("aa", 15);
	Person p2("bb", 35);
	Person p3("cc", 25);
	Person p4("dd", 55);
	Person p5("ss", 25);
	
	v.push_back(&p1);
	v.push_back(&p2);
	v.push_back(&p3);
	v.push_back(&p4);
	v.push_back(&p5);
	
	for(vector<Person*>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "姓名： " << (*it)->m_name << " 年龄： " << (*it)->m_age << endl;
		//cout << "姓名： " << it->m_name << " 年龄： " << it->m_age << endl;
	}
}





// vector 容器嵌套
void test01()
{
	vector<vector<int>> v;
	
	vector<int> v1;
	vector<int> v2;
	vector<int> v3;
	vector<int> v4;
	vector<int> v5;
	
	for(int i = 0; i < 4; i++)
	{
		v1.push_back(i + 1);
		v2.push_back(i + 2);
		v3.push_back(i + 3);
		v4.push_back(i + 4);
		v5.push_back(i + 5);
	}
	
	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);
	v.push_back(v4);
	v.push_back(v5);
	
	for(vector<vector<int>>::iterator it = v.begin(); it != v.end(); it++)
	{
		for(vector<int>::iterator vit = (*it).begin(); vit != (*it).end(); vit++)
		{
			cout << *vit << " ";
		}
		cout << endl;
	}
}



// string 构造函数

void test01()
{
	string s; // default structure 
	
	const char * str = "hello world";
	string s1(str);		// parameter function
	 cout << s1 << endl;
	
	string s2(s1);		// copy structue function
	cout << s2 << endl;
	
	string s3(10, 'a');	// init function
	cout << s3 << endl;
}




// string: assignment operation

void test01()
{
	string s1;
	s1 = "hello world";
	cout << s1 << endl;
	
	string s2;
	s2 = s1; 
	cout << s2 << endl;
	
	string s3;
	s3 = 'a';
	cout << s3 << endl;
	
	string str4;
	str4.assign("hello C++");
	cout << str4 << endl;
	
	string str5;
	str5.assign("hello world", 5);
	cout << str5 <<endl;
	
	string str6;
	str6.assign(str5);
	cout << str6 <<endl;
	
	string str7;
	str7.assign(5, 'c');
	cout << str7 << endl;
}



// string: string connect

void test01()
{
	string s1;
	s1 = "I";
	s1 += " like play ";
	
	cout << s1 << endl;
	
	s1 += ":";
	cout << s1 << endl;
	
	string s2 = "League of Legend";
	s1 += s2;
	cout << s1 << endl;
	
	
	string s3 = "I love game";
	string s4 = "LoL";
	s3.append(s4, 0, 3);
	cout << s3 << endl;
}



// string: Search and Replace

void test01()
{
	string s1 = "abcdefab";
	string s2 = "ab";
	
	int pos = s1.find(s2);		// from left to right
	cout << pos << endl;
	
	pos = s1.rfind(s2);			// from right to left
	cout << pos << endl;
}

void test02()
{
	string s1 = "abcdefg";
	s1.replace(1, 3, "1111");
	cout << s1 << endl;
}





// string: String compare

void test02()
{
	string s1 = "hello";
	string s2 = "hfllo";
	
	int ret = s1.compare(s2);
	cout << ret << endl;
}


// string : String access

void test01()
{
	string str = "abcded";
	cout << str << endl;
	for(int i = 0; i < str.size(); i++)
	{
		cout << str[i] << endl;
	}
	
	str[0] = 'x';
	cout << str << endl;
}


// string : Insert and Delete

void test03()
{
	string str = "abcded";
	str.insert(1, "leil");
	cout << str << endl;
	
	string str2 = "aa";
	str.insert(5, str2);
	cout << str << endl;
	
	str.erase(1, 6);
	cout << str << endl;
}



// string : Substring

void test04()
{
	string str = "abcded";
	string str2 = str.substr(1, 3);

	
	
	string email = "cs1ytjer@qq.com";
	
	int pos = email.find('@');
	
	string userName = email.substr(0, pos);
	cout << userName << endl;
	
}






#include <vector>
// vector container

void printVector(vector<int> &v)
{
	for(vector<int>::iterator it = v.begin(); it != v.end(); it++)
		cout << *it << " ";
	cout << endl;
}


void test01()
{
	vector<int> v1;			// default construction
	for(int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}
	printVector(v1);
	
	
	vector<int> v2(v1.begin(), v1.end());	// section construction
	printVector(v2);
	
	
	vector<int>v3(10, 23);					// numbers construction
	printVector(v3);
	
	vector<int> v4(v3);						// deep copy construction
	printVector(v2);
}


// Vector : Assignment operation


void test02()
{
	vector<int> v1;
	for(int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}
	printVector(v1);
	
	vector<int> v2;
	v2 = v1;
	printVector(v2);
	
	vector<int> v3;
	v3.assign(v1.begin(), v1.end());
	printVector(v3);
	
	vector<int> v4;
	v4.assign(10, 43);
	printVector(v4);
	
}


// Vector: Capacity and Size

void test03()
{
	vector<int> v1;
	for(int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}
	printVector(v1);
	
	if(v1.empty())
	{
		cout << "v1 is Empty" << endl;
	}
	else
	{
		cout << "v1 is Not Empty" << endl;
		cout << v1.capacity() << endl;
		cout << v1.size() << endl;
	}
	
	v1.resize(15, 21);	// Resize the vector container size. Parameter two is default value. The value can modify
	printVector(v1);
	
	v1.resize(13, 2);
	printVector(v1);
}



// Vector: Insert and Delete

void test04()
{
	vector<int> v1;
	for(int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}
	printVector(v1);
	
	v1.pop_back();
	printVector(v1);
	
	v1.insert(v1.begin(), 2, 1444);
	printVector(v1);
	
	v1.erase(v1.begin(), v1.end());
	if(v1.empty())
		cout << "V1 is Empty" << endl;
}