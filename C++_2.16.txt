// Stack Capacity: Common interface
#include <stack>

void test01()
{
	stack<int> s;
	s.push(10);
	s.push(20);
	s.push(30);
	s.push(40);

	cout << "栈的大小为：" << s.size() << endl;
	while(!s.empty())
	{
		cout << "当前栈顶元素为：" << s.top() << endl;
		s.pop();
	}
	
	cout << "栈的大小为：" << s.size() << endl;
}




// Queue Capacity: Common interface
#include <queue>

class Person
{
public:
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	
	string m_name;
	int m_age;
};

void test01()
{
	queue<Person> q;
	
	Person p1("唐僧", 30);
	Person p2("悟空", 2000);
	Person p3("八戒", 1500);
	Person p4("三弟", 555);
	
	q.push(p1);
	q.push(p2);
	q.push(p3);
	q.push(p4);
	
	cout << "Size of queue : " << q.size() << endl;
	
	while(!q.empty())
	{
		cout << "队头元素的姓名：" << q.front().m_name << "  队头元素的年龄: " << q.front().m_age << endl;
		cout << "队尾元素的姓名：" << q.back().m_name << "  队尾元素的年龄: " << q.back().m_age << endl;
		cout << endl;
		q.pop();
	}
	
	cout << "Size of queue:" << q.size() << endl;
}


// List Capacity: Constructure func
#include <list>

void printList(const list<int> &L)
{
	for(list<int>::const_iterator it = L.begin(); it != L.end(); it++)
	{
		cout << *it << "  ";
	}
	cout << endl;
}



void test01()
{
	list<int>L;
	L.push_back(10);
	L.push_back(20);
	L.push_back(30);
	L.push_back(40);

	printList(L);
	
	list<int>L2(L.begin(), L.end());	// Section constructure
	printList(L2);
	
	list<int>L3(L2);					// Deep copy constructure
	printList(L3);
	
	list<int>L4(10, 100);				// Number constructure
	printList(L4);
	
}


// List Capacity: Assignment and Exchange

void test02()
{
	list<int>L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);
	
	printList(L1);
	
	list<int>L2;
	L2 = L1;
	printList(L2);
	
	list <int> L3;
	L3.assign(L1.begin(), L1.end());
	printList(L3);
	
	list <int> L4;
	L4.assign(10, 150);
	printList(L4);
	
	L4.swap(L1);
	printList(L1);
	printList(L4);
	
}

// List Capacity: Size operation

void test03()
{
	list<int>L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);
	
	printList(L1);
	cout << "Size of list : " << L1.size() << endl;
	
	L1.resize(2);
	printList(L1);
	cout << "Size of list : " << L1.size() << endl;
	
	L1.resize(5, 10);
	printList(L1);
	cout << "Size of list : " << L1.size() << endl;
	
	L1.clear();
	int ret = L1.empty();
	cout << ret << endl;
}


// List Capacity: Insert and Delete

void test04()
{
	list<int>L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);
	
	printList(L1);
	
	L1.insert(L1.begin(), 2, 100);
	printList(L1);
	
	list<int>::iterator it = L1.begin();
	L1.insert(++it, 150);
	printList(L1);
	
	it = L1.begin();	
	L1.erase(it);		// Position delete
	cout << *it << endl;
	printList(L1);
	
	L1.insert(L1.end(), 4, 100);
	printList(L1);
	L1.remove(100);		// Value delete
	printList(L1);
}


// List Capacity: Data Access

void test05()
{
	list<int> L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);
	
	list<int>::iterator it = L1.begin();
	it;
	cout << L1.back() << endl;
	cout << *it << endl;
}

// List Capacity : Reverse and Sort

bool myCompare(int v1, int v2)
{
	return v1 > v2;
}

void test06()
{
	list<int>L1;
	L1.push_back(60);
	L1.push_back(50);
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);
	
	printList(L1);
	L1.reverse();
	printList(L1);
	
	L1.sort();
	printList(L1);
	
	L1.sort(myCompare);
	printList(L1);

}

// List Capacity : Sort of case



class Person
{
public:
	Person(string name, int age, int height)
	{
		this->m_Name = name;
		this->m_Age = age;
		this->m_Height = height;
	}
	
	
	string m_Name;
	int m_Age;
	int m_Height;
};

bool comparePerson(Person p1, Person p2)
{
	if(p1.m_Age == p2.m_Age)
		return p1.m_Height > p2.m_Height;
	return p1.m_Age < p2.m_Age;
}

void test07()
{
	list <Person> L;
	
	Person p1("张飞", 25, 150);
	Person p2("刘备", 35, 170);
	Person p3("关羽", 30, 200);
	Person p4("曹操", 35, 180);
	Person p5("孙坚", 37, 190);
	Person p6("赵云", 29, 188);
	
	L.push_back(p1);
	L.push_back(p2);
	L.push_back(p3);
	L.push_back(p4);
	L.push_back(p5);
	L.push_back(p6);
	
	for(list<Person>::iterator it = L.begin(); it != L.end(); it++)
	{
		cout << "姓名： " << it->m_Name << " 年龄： " << it->m_Age << " 身高 ：" << it->m_Height << endl;
	}
	
	cout << "----------------------------------------------------------" << endl;
	L.sort(comparePerson);
	for(list<Person>::iterator it = L.begin(); it != L.end(); it++)
	{
		cout << "姓名： " << it->m_Name << " 年龄： " << it->m_Age << " 身高 ：" << it->m_Height << endl;
	}
}





// Set Capacity : Constructure and Assignment
#include <set>


void printSet(set<int> S)
{
	for(set<int>::iterator it = S.begin(); it != S.end(); it++)
	{
		cout << *it << "  ";
	}
	cout << endl;
}





void printSet2(multiset<int> S)
{
	for(multiset<int>::iterator it = S.begin(); it != S.end(); it++)
	{
		cout << *it << "  ";
	}
	cout << endl;
}




void test01()
{
	set<int>s;
	s.insert(60);
	s.insert(30);
	s.insert(20);
	s.insert(40);
	s.insert(20);
	
	printSet(s);
	
}


// Set Capacity : Size and Exchange

void test02()
{
	set<int> s;
	s.insert(60);
	s.insert(30);
	s.insert(20);
	s.insert(40);
	s.insert(20);
	
	cout << s.size() << endl;

	//s.clear();
	int ret = s.empty();
	cout << ret << endl;
	
	set<int> s2;
	s2.insert(32);
	s2.insert(22);
	s2.insert(12);
	s2.insert(62);
	
	printSet(s2);
	s2.swap(s);
	printSet(s);
	printSet(s2);
	
}

// Set Capacity : Insert and Delete

void test03()
{
	set<int>s2;
	s2.insert(32);
	s2.insert(22);
	s2.insert(12);
	s2.insert(62);
	
	printSet(s2);
	s2.erase(s2.begin());
	printSet(s2);
	
	s2.erase(22);
	printSet(s2);
}

// Set Capacity: Search and Statistics

void test04()
{
	set<int>s;
	s.insert(60);
	s.insert(30);
	s.insert(20);
	s.insert(40);
	s.insert(20);
	
	set<int>::iterator it = s.begin();
	cout << &it << endl;
	it = s.find(40);
	cout << &it << endl;
	
	cout << s.count(30) << endl;
}

// Set Capacity : The difference between set and multiset

void test05()
{
	/*
	multiset<int> ms;
	ms.insert(60);
	ms.insert(30);
	ms.insert(20);
	ms.insert(40);
	ms.insert(20);
	
	printSet2(ms);
	
	cout << ms.size() << endl;
	
	multiset<int>::iterator it = ms.find(20);
	cout << ms.count(20) << endl;

	
	set<int> s;
	pair<set<int>::iterator, bool> ret = s.insert(10);
	cout << ret.second << endl;
	ret = s.insert(10);
	cout << ret.second << endl;
	*/
	
	pair<set<int>::iterator, bool> ret;
	multiset<int> ms;
	//ret = ms.insert(30);
	//cout << ret.second << endl;
	//ret = ms.insert(30);
	//cout << ret.second << endl;
	

}


// Pair Capacity : Create a pair

void test06()
{
	pair<string, int>p("Tom", 31);
	cout << p.first << endl;
	cout << p.second << endl;
	
	pair<string, int>p2 = make_pair("Jerry", 23);
	cout << p2.first << endl;
	cout << p2.second << endl;
}


// Set Capacity : Sort

class Person
{
public:
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	
	string m_name;
	int m_age;
};


class Mycompare
{
public:
	bool operator()(int v1, int v2)
	{
		return v1 > v2;
	}
};

class comparePerson
{
public:
	bool operator()(const Person p1, const Person p2)
	{
		return p1.m_age < p2.m_age;
	}
};


void test07()
{
	set<int>s;
	s.insert(60);
	s.insert(30);
	s.insert(20);
	s.insert(40);
	s.insert(20);
	s.insert(10);
	printSet(s);
	
	
	set<int, Mycompare>s2;
	
	s2.insert(60);
	s2.insert(30);
	s2.insert(20);
	s2.insert(40);
	s2.insert(20);
	s2.insert(10);
	for(set<int, Mycompare>::iterator it = s2.begin(); it != s2.end(); it++)
		cout << *it << "  ";
	cout << endl;
}

void test08()
{
	set<Person, comparePerson> s;
	Person p1("刘备", 25);
	Person p2("曹操", 35);
	Person p3("关羽", 26);
	Person p4("张飞", 27);
	s.insert(p1);
	s.insert(p2);
	s.insert(p3);
	s.insert(p4);
	
	for(set<Person, comparePerson>::iterator it = s.begin(); it != s.end(); it++)
		cout << "姓名： " << it->m_name << "  年龄： " << it->m_age << endl;
}






// Map Capacity : Constructure and Assignment

void printMap(map<int, int>m)
{
	for(map<int, int>::iterator it = m.begin(); it != m.end(); it++)
		cout << "key : " << it->first << " value :" << it->second << " ";
	cout << endl;
}


void test01()
{
	map<int, int>m;
	m.insert(pair<int, int>(1, 10));
	m.insert(pair<int, int>(2, 20));
	m.insert(pair<int, int>(3, 30));
	m.insert(pair<int, int>(4, 40));
	printMap(m);
	
	map<int, int>m2(m);
	printMap(m2);
	
	map<int, int>m3;
	m3 = m2;
	printMap(m3);
}


// Map Capacity: Size and Exchange
void test02()
{
	map<int, int>m;
	m.insert(pair<int, int>(1, 10));
	m.insert(pair<int, int>(2, 20));
	m.insert(pair<int, int>(3, 30));
	m.insert(pair<int, int>(4, 40));
	printMap(m);
	
	map<int, int>m2;
	m2.insert(pair<int, int>(5, 320));
	m2.insert(pair<int, int>(7, 230));
	m2.insert(pair<int, int>(9, 410));
	m2.insert(pair<int, int>(13, 510));
	printMap(m2);
	
	m2.swap(m);
	printMap(m);
	printMap(m2);
	
	cout << m.size() << endl;
	
	m.clear();
	int ret = m.empty();
	cout << ret << endl;
	
}


// Map Capacity: Insert and Delete

void test03()
{
	map<int, int>m2;
	m2.insert(pair<int, int>(5, 320));
	m2.insert(make_pair(2, 31));
	m2.insert(make_pair(1, 23));
	m2.insert(make_pair(4, 35));
	m2.insert(make_pair(5, 36));

	printMap(m2);
	
	m2.erase(m2.begin());
	printMap(m2);
	
	map<int, int>::iterator it = m2.begin();
	m2.erase(++it);
	printMap(m2);
	
	m2.erase(5);
	printMap(m2);
}


// Map Capacity: Search and Statistics

void test04()
{
	map<int, int>m;
	m.insert(pair<int, int>(1, 10));
	m.insert(pair<int, int>(2, 20));
	m.insert(pair<int, int>(2, 40));
	m.insert(pair<int, int>(3, 30));
	
	map<int, int>::iterator pos = m.find(3);
	if(pos != m.end())
		cout << "Search success" << endl;
	else
		cout << "Search unsuccessful" << endl;
	
	cout << m.count(2) << endl;
}

// Map Capacity : Sort



class Mycompare
{
public:
	bool operator()(int v1, int v2)
	{
		return v1 > v2;
	}
};


void printMap2(map<int, int, Mycompare>m)
{
	for(map<int, int, Mycompare>::iterator it = m.begin(); it != m.end(); it++)
		cout << "key = " << it->first << " value = " << it->second << endl;
}

void test05()
{
	map<int, int, Mycompare>m;
	m.insert(pair<int, int>(1, 10));
	m.insert(pair<int, int>(2, 20));
	m.insert(pair<int, int>(3, 30));
	m.insert(pair<int, int>(4, 40));
	printMap2(m);
}







#include <vector>
#include <ctime>
#include <map>

// STL case: group worker 


#define Plan 0
#define Art 1
#define Sale 2

class Worker
{
public:
	
	
	
	string m_name;
	int salary;
};


void createWorker(vector<Worker>&v)
{
	string nameseed = "ABCDEFGHIJ";
	for(int i = 0; i < 10; i++)
	{
		Worker worker;
		worker.m_name =  "员工";
		worker.m_name += nameseed[i];
		worker.salary = rand() % 10000 + 10000;
		v.push_back(worker);
	}
}

void printWorker(const vector<Worker>v)
{
	for(vector<Worker>::const_iterator it = v.begin(); it != v.end(); it++)
	{
		cout << " Name: " << it->m_name << "  Salary : " << it->salary << endl;
	}
}

void printMap(const multimap<int, Worker> m)
{
	for(multimap<int, Worker>::const_iterator it = m.begin(); it != m.end(); it++)
	{
		cout << "DeptID: " << (*it).first << " Worker : " << it->second.m_name << endl;
	}
}

void showWorkerByGroup(multimap<int, Worker> m)
{
	cout << "Planning Department : " << endl;
	int count = m.count(Plan);
	int index = 0;
	multimap<int, Worker>::iterator pos = m.find(Plan);
	for(; pos != m.end() && index < count; pos++, index++)
	{
		cout << "Name : " << pos->second.m_name << " Salary : " << pos->second.salary << endl;
	}
	
	cout << "----------------------------------------------------" << endl;
	cout << "Art Department : " << endl;
	count = m.count(Art);
	index = 0;
	pos = m.find(Art);
	for(; pos != m.end() && index < count; pos++, index++)
	{
		cout << "Name : " << pos->second.m_name << " Salary : " << pos->second.salary << endl;
	}
	
	cout << "----------------------------------------------------" << endl;
	cout << "Salee Department : " << endl;
	count = m.count(Sale);
	index = 0;
	pos = m.find(Sale);
	for(; pos != m.end() && index < count; pos++, index++)
	{
		cout << "Name : " << pos->second.m_name << " Salary : " << pos->second.salary << endl;
	}
}

void setGroup(vector<Worker> &v, multimap<int, Worker>&m)
{
	for(vector<Worker>::iterator it = v.begin(); it != v.end(); it++)
	{
		int deptId = rand() % 3;
		m.insert(make_pair(deptId, *it));
	}
}



void test01()	
{
	srand((unsigned int)time(NULL));
	vector<Worker> vWorker;
	createWorker(vWorker);
	//printWorker(vWorker);
	
	multimap<int, Worker>mWorker;
	setGroup(vWorker, mWorker);
	showWorkerByGroup(mWorker);
}