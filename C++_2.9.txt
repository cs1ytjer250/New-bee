// 模版
// 声明模板
template <typename T>

void my_Swap(T &a, T &b)
{
	T temp = a;
	a = b;
	b = temp;
}

void test01()
{
	int a = 2;
	int b = 4;
	
	double c = 2.3;
	double d = 4.5;
	// 模板的使用1：自我推导
	my_Swap(a, b);
	
	// 2：自己指定
	my_Swap<double>(c, d);
	
	cout << a << endl;
	cout << b << endl;
	
	cout << c << endl;
	cout << d << endl;
}





// 模版注意事项
// 1.自动类型推导，必须推导出一致的数据类型T才能使用。
// 2.模板必须要确定出T的数据类型，才可以使用。
template<class T>
void myswap(T &a, T &b)
{
	T temp = a;
	a = b;
	b = temp;
}



template<class T>

void Select_Sort(T arr[], int n)
{
	
	for(int i = 0; i < n; i++)
	{
		int max = i;
		for(int j = i + 1; j < n; j++)
		{
			if(arr[j] > arr[max])
			{
				max = j;
			}
		}
		myswap(arr[max], arr[i]);
	}
}


template<class T>
void printArray(T arr[], int n)
{
	for(int i = 0; i < n; i++)
		cout << arr[i] << endl;
}


void test02()
{
	int arr[] = {1,3,5,7,5,7,9,8,2};
	int len = sizeof(arr) / sizeof(arr[0]);
	Select_Sort(arr, len);
	printArray(arr, len);
}


void test01()
{
	char arr[] = "bcadef";
	int len = sizeof(arr) / sizeof(arr[0]) - 1;
	Select_Sort(arr, len);
	printArray(arr, len);
}





// 普通函数与函数模板的区别
// 1.普通函数调用可以发生隐式类型转换
// 2.函数模板：用自动类型推导，不可以发生隐式类型转换
// 3.函数模板：用显示指定类型，可以发生隐式类型转换

template<class T>
T Add(T a, T b)
{
	return a + b;
}



void test01()
{
	int a = 10;
	int b = 20;
	char c = 'C';
	
	cout << Add<int>(a, c);
}




// 模板调用规则

// 1.如果函数模板和普通函数都可以实现，优先调用普通函数
// 2.可以通过空模板参数列表来强制调用函数模板
// 3.函数模板可以发生重载
// 4.如果函数模板可以产生更好的匹配，优先调用函数模板

void Print_a(int a, int b)
{
	cout << "普通函数的调用" << endl;
}

template<class T>
void Print_a(T a, T b)
{
	cout << "函数模板的调用" << endl;
}


void test01()
{
	int a = 10;
	int b = 20;
	char c = 'C';
	Print_a(a, b);
	
	Print_a<>(a, b); // 强制调用模板
	
}





// 模板局限性
// 有些特定的数据类型，需要用具体化方式做特殊实现

class Person
{
public:
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	string m_name;
	int m_age;
};

template<class T>
bool myCompare(T &a, T &b)
{
	if(a == b)
		return true;
	else 
		return false;
}

template<> bool myCompare(Person &p1, Person &p2)
{
	if(p1.m_name == p2.m_name && p1.m_age == p2.m_age)
		return true;
	else
		return false;
}


void test01()
{
	Person a("张三", 18);
	Person b("张三", 10);
	int ret = myCompare(a, b);
	if(ret)
		cout << "a == b" << endl;
	else
		cout << "a != b" << endl;
}




// 类模板

template<class NameType, class AgeType>
class Person
{
public:
	Person(NameType name, AgeType age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	
	void show_Person()
	{
		cout << m_name << " " << m_age << endl;
	}
	
	NameType m_name;
	AgeType m_age;
};





void test01()
{
	Person<string, int> a("张三", 18);
	Person<double, char> b(3.15, 'a');
	a.show_Person();
	b.show_Person();
}




// 类模板和函数模板的区别
// 1.类模板没有自动类型推导的使用方式
// 2.类模板在模板参数列表中可以有默认参数


// 当模板中有默认参数时，显示声明时，可以省略已有默认参数类型（函数模板没有次操作）
template<class NameType, class AgeType = int>
class Person
{
public:
	Person(NameType name, AgeType age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	
	void show_Person()
	{
		cout << m_name << " " << m_age << endl;
	}
	
	NameType m_name;
	AgeType m_age;
};



void test01()
{
	Person<string> a("张三", 18);		// 没有传入int
	Person<double, char> b(3.15, 'a');
	a.show_Person();
	b.show_Person();
}






// 类模板中成员函数和普通类中成员函数创建时机有区别
// 普通类中的成员函数一开始就可以创建
// 类模板中的成员函数在调用时创建

class Person1
{
public:
	void shouPerson1()
	{
		cout << "Person1 show" << endl;
	}
};


class Person2
{
public:
	void shouPerson2()
	{
		cout << "Person2 show" << endl;
	}
};

template <class T>
class Myclass
{
public:
	T obj;
	// 因为没有调用，所以可以编译成功
	void func1()
	{
		obj.shouPerson1();
	}
	
	void func2()
	{
		obj.shouPerson2();
	}
};


void test01()
{
	Myclass<Person1> m;
	m.func1();
	//m.func2();
}




// 类模板对象做函数参数
// 类模板实例化出的对象，向函数传参的方式



template<class T1, class T2>
class Person
{
public:
	Person(T1 name, T2 age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	
	void showPerson()
	{
		cout << "姓名：" << this->m_name << " 年龄：" << this->m_age << endl;
	}
	
	T1 m_name;
	T2 m_age;
};


// 方式1：指定传入的类型 --直接显示对象的数据类型
void PrintPerson(Person<string, int> &p)
{
	p.showPerson();
}


void test01()
{
	Person<string, int> p("库控", 150);
	PrintPerson(p);
}


// 方式2：参数模板化     --将对象中的参数变为模板进行传递
template<class T1, class T2>
void PrintPerson(Person<T1, T2> &p)
{
	p.showPerson();
	cout << "T1的类型为：" << typeid(T1).name() << endl;
	cout << "T2的类型为：" << typeid(T2).name() << endl;
}

void test02()
{
	Person<string, int> p("八戒", 384);
	PrintPerson(p);
}


// 方式3：整个类模板化   --将这个对象类型模板化进行传递
template <class T>
void PrintPerson(T &p)
{
	p.showPerson();
	cout << "T的类型为：" << typeid(T).name() << endl;
}

void test03()
{
	Person<string, int> p("唐僧", 30);
	PrintPerson(p);
}
