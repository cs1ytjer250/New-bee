
// 扫雷游戏

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define Row 9
#define Col 9
#define Rows Row+2
#define Cols Col+2
#define EASY_COUNT 10

// 计算坐标周围九宫格内雷的数量
char get_mine_count(char mine[Rows][Cols], int x, int y)
{
	return mine[x - 1][y - 1]+
		mine[x - 1][y]+
		mine[x][y - 1]+
		mine[x + 1][y - 1]+
		mine[x - 1][y]+
		mine[x + 1][y + 1]+
		mine[x][y + 1]+
		mine[x - 1][y + 1] - 8 * '0';
}


// 扫雷
void FindMine(char mine[Rows][Cols], char show[Rows][Cols], int row, int col)
{
	int x = 0;
	int y = 0;
	// 步数
	int win = 0;
	while(win == row * col - EASY_COUNT)
	{
		printf("请输入排查雷的坐标：");

		// 玩家输入的下标
		scanf("%d%d", &x, &y);

		// 判断合法值
		if(x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if(mine[x][y] == '1')
			{
				printf("很遗憾，你被炸死了\n");
				DisplayBoard(mine, row, col);
				break;
			}
			else
			{	
				// 接收并显示雷的数量，并使步数加1
				int count = get_mine_count(mine, x, y);
				show[x][y] = count + '0';
				DisplayBoard(show, row, col);
				win++;
			}
		}
		else
		{
			printf("输入坐标非法，请重新输入！\n");
		}
	}
	// 判断输赢
	if(win == row * col - EASY_COUNT)
	{
		printf("恭喜你，排雷成功\n");
		DisplayBoard(mine, row, col);
	}
}


// 随机生成雷
void SetMine(char board[Rows][Cols], int row, int col)
{
	int count = EASY_COUNT;
	while(count)
	{
		int x = rand() % row + 1;
		int y = rand() % col + 1;
		if(board[x][y] == '0')
		{
			board[x][y] = '1';
			count--;
		}
			
	}
}


// 展示扫雷游戏
void DisplayBoard(char board[Rows][Cols], int row, int col)
{
	int i,j;
	for(i = 0; i <= col; i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for(i = 1; i <= row; i++)
	{
		printf("%d ", i);
		for(j = 1; j <= col; j++)
		{
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}
}

// 初始化
void InitBoard(char board[Rows][Cols], int rows, int cols, char set)
{
	int i, j;
	for(i = 0; i < rows; i++)
	{
		for(j = 0; j < cols; j++)
		{
			board[i][j] = set;
		}
	}
}

// 游戏进程
void game()
{
	char mine[Rows][Cols] = { 0 };
	char show[Rows][Cols] = { 0 };
	InitBoard(mine, Rows, Cols, '0');
	InitBoard(show, Rows, Cols, '#');
	
	//DisplayBoard(mine, Row, Col);
	DisplayBoard(show, Row, Col);
	
	SetMine(mine, Row, Col);
	DisplayBoard(mine, Row, Col);
	
	FindMine(mine, show, Row, Col);
}

// 菜单
void menu()
{
	printf("*************************\n");
	printf("******  1. play   *******\n");
	printf("******  0. exit   *******\n");
	printf("*************************\n");
}

// 进行逻辑
void text()
{
	int input = 1;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		scanf("%d:", &input);
		switch(input)
		{
			case 1:
				{
					game();
					break;
				}
			case 0:
				{
					printf("游戏结束！\n");
					break;
				}
			default:
				printf("选择错误，请重新选择!\n");
				break;
		}
	}while(0);
}

// 游戏入口
int main()
{
	text();
   return 0;
}


*****************************************************************

// 计算一个整数的机器数中1的个数 （n>0）

// 模运算
int main()
{
	int num = 2;
	int count = 0;
	while(num)
	{
		if(num % 2 ==1)
		{
			count++;
		}
		num = num / 2;
	}
	printf("%d\n", count);
   return 0;
}


// 位运算
int main()
{
	int num = -1;
	int count = 0;
	for(int i = 0; i < 32; i++)
	{
		if(((num >> i) & 1) == 1)
			count++;
	}
	printf("%d\n", count);
   return 0;
}