// 指针

// 创建指针变量，是通过：类型+‘*’
int main()
{
	int a = 0x11223344;
	int* pa = &a;
	char* pc = &a;
	printf("%p\n", pa);
	printf("%p\n", pa+1);
	// 指针+1，表示当前指针向前走几个字节。
	// 整型指针，向前移动一次是4个字节的长度，char类型为1个字节。
	printf("%p\n", pc);
	printf("%p\n", pc+1);
   return 0;
}


int main()
{
	int arr[10] = {0};
	// 将数组的首地址，用一个指针变量存放，当将地址传给指针变量时，可以不用取地址。
	int* pa = arr;
	for(int i = 0; i < 10; i++)
	{
		// 每次修改一个地址指向的元素值。
		*(pa+i) = 1;
		printf("%d\n", arr[i]);
	}
   return 0;
}

// *p == a
int main()
{
	int a = 10;
	int* p = &a;
	// 当指针变量指向的地址是NULL时，这片空间是不能访问的。
	//p = NULL;
	if(p != NULL)
	{
		*p = 20;
		printf("%d\n", *p);
		printf("%d\n", a);
	}
	
   return 0;
}


// 非法操作，创建指针变量时，指针所指向的地址一定要是明确的。
int* test()
{
	int p = 10;
	return &p;
}
int main()
{
	int* a = test();
	printf("%p\n", a);
	// 当指针变量不知道初始化的值时，可以赋值NULL（NULL = （（void *）0））
	int* p = NUll;
   return 0;
}

// 指针遍历数组
int main()
{
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	int* p = arr;
	// 指针既能顺序访问也能逆序访问。
	// int* p = &arr[9];
	int sz = sizeof(arr) / sizeof(arr[0]);
	for(int i = 0; i < sz; i++)
	{
		printf("%d ", *p);
		p ++ ;
		// p--;
	}
   return 0;
}



#define N_VALUES 5

int main()
{
	float value[N_VALUES] = {0.0};
	float* vp;
	for(vp = &value[0]; vp < &value[N_VALUES];)
	{
		*vp++ = 1.0;
	}
	for(int i = 0; i < N_VALUES; i++)
	{
		printf("%lf ", value[i]);
	}

   return 0;
}


// 指针减指针，获得中间元素的个数（指针间的空间个数），左闭右开区间。
// 必须是统一块内存空间。
int main()
{
	int arr[N_VALUES] = {1,2,3,4,5};
	printf("%d\n", &arr[4]-&arr[1]);
   return 0;
}


// 用指针计算字符串长度

int my_strlen(char* arr)
{
	char* start = arr;
	char* end = arr;
	// 扫描字符串，当指针指向的值为0时扫描结束
	while(*end != '\0')
	{
		end++;
	}
	// 返回指针的间隔大小	
	return end - start;
}

int main()
{
	char arr[]="bit";
	int len = my_strlen(arr);
	printf("%d\n", len);
   return 0;
}


// 指针数组

int main()
{
	int a = 10;
	int b = 20;
	int c = 30;
	int* arr[3] = {&a, &b, &c};
	for(int i = 0; i < 3; i++)
	{
		printf("%d ", *(arr[i]));
	}
   return 0;
}