#define InitSize 10

void Initlist(int arr[], int initsize)
{
	for(int i = 0; i < initsize; i++)
	{
		arr[i] = i+1;
	}
	
}

void PrintArr(int arr[], int initsize)
{
	for(int i = 0; i < initsize; i++)
	{
		printf("%d ", arr[i]);
	}
}

void Reverse(int arr[], int initsize)
{
	int left = 0;
	int right = initsize-1;
	int temp = 0;
	while(left <= right)
	{
		temp = arr[left];
		arr[left] = arr[right];
		arr[right] = temp;
		left++;
		right--;
	}
} 
int main()
{
	int arr[InitSize];
	Initlist(arr, InitSize);
	PrintArr(arr, InitSize);
	printf("\n");
	Reverse(arr, InitSize);
	PrintArr(arr, InitSize);
   return 0;
}





#include <stdio.h>

#define InitSize 10

void Initlist(int arr[], int initsize)
{
	for(int i = 0; i < initsize; i++)
	{
		arr[i] = i+1;
	}
	
}

void Initlist2(int arr[], int initsize)
{
	for(int i = 0; i < initsize; i++)
	{
		arr[i] = i*2;
	}
	
}

void PrintArr(int arr[], int initsize)
{
	for(int i = 0; i < initsize; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}

void Swap(int arr[], int arr2[], int initsize)
{
	int i = 0;
	int temp = 0;
	for(i = 0; i < initsize; i++)
	{
		temp = arr[i];
		arr[i] = arr2[i];
		arr2[i] = temp;
		
	}
}
 
int main()
{
	int arr[InitSize];
	int arr2[InitSize];
	Initlist(arr, InitSize);
	Initlist2(arr2, InitSize);
	PrintArr(arr, InitSize);
	PrintArr(arr2, InitSize);
	Swap(arr, arr2, InitSize);
	PrintArr(arr, InitSize);
	PrintArr(arr2, InitSize);

   return 0;
}



int main()
{
	int arr[] = {1,2,3,4,5};
	short* p = (short*)arr;
	for(int i = 0; i < 4; i++)
	{
		*(p+i) = 0;
	}
	for(int i = 0; i < 5; i++)
	{
		printf("%d\n", arr[i]);
	}

   return 0;
}



// 有符号数和无符号数的计算

// 当定义全局变量时，如果初始化为0
int i;
int main()
{	
	// i的值为-1
	i--;
	// 这里的i是有符号数，而sizeof（i）是无符号数，所以要把i转换成无符号数，符号位转换为有效位。
	// sizeof（）是计算变量/类型所占空间的大小
	if(i > sizeof(i))
		printf(">\n");
	else
		printf("<\n");

   return 0;
}


// 对前置++和后置++的运算
int main()
{
	int a, b, c;
	a = 5; 
	c = ++a; // 6
	b = ++c, c++, ++a, a++; // 7
	b += a++ + c;
	printf("%d %d %d\n", a, b, c); // 9 7 24
   return 0;
}


// 计算二进制位中1的个数

// 逻辑右移（解法1）
int count_bit_one(int n)
{
	int count = 0;
	int i = 0;
	for(i = 0; i < 32; i++)
	{
		if(((n >> i) & 1) == 1)
		{
			count++;
		}
	}
	return count;
}

Time = O（1）

// 模除法（解法2）
int count_bit_one2(unsigned int n)
{
	int count = 0;
	int i = 0;
	while(n)
	{
		if((n%2) == 1)
		{
			n = n/2;
			count++;
		}
	}
	return count;
}

Time = O(n)

// 按位与（解法3）
int count_bit_one3(int n)
{
	int count = 0;
	while(n)
	{
		n = n & (n-1);
		count++;
	}
	return count;
}
Time = O(n)

int main()
{
	int a = 1;	
	int count = count_bit_one(a);
	printf("%d\n", count);
	count = count_bit_one2(-1);
	printf("%d\n", count);
   return 0;
}

// 计算两个整数的二进制位不同的个数
// 异或求解，并对其计算二进制位1的个数，这个个数就是不同的二进制位
int get_diff_bit(int m, int n)
{
	int tmp = m^n;
	int count = 0;
	while(tmp)
	{
		tmp = tmp & (tmp - 1);
		count ++;
	}
	return count;
}