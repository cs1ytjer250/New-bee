void reverse_string(char arr[])
{
	char tmp = arr[0];
	int len = strlen(arr);
	arr[0] = arr[len - 1];
	arr[len - 1] = '\0';
	if(strlen(arr+1) >= 2)
		reverse_string(arr + 1);
	arr[len - 1] = tmp;
	
}

int main()
{
	char arr[] = "abcdef";
	int sz = sizeof(arr)/sizeof(arr[0]);
	reverse_string(arr);
	printf("%s\n", arr);
   return 0;
}



int Digitsum(int num)
{
	if(num > 9)
		return Digitsum(num / 10) + num % 10;
	else
		return num;
}

int main()
{
	int num = 1234;
	int ret = Digitsum(num);
	printf("%d\n", ret);
   return 0;
}




double Pow(int n, int k)
{
	if( k == 0)
		return 1;
	else if(k < 0)
		// 将负次数幂转为正次数，再用else进行递归计算。
		return 1.0 / (n * Pow(n, -k));
	else
		return n * Pow(n, k-1);
}

int main()
{
	int n = 3;
	int k = -2;
	double ret = Pow(n, k);
	printf("%lf\n", ret);
   return 0;
}






int Pow(int n, int k)
{
	if(k == 0)
	{
		return 1;
	}
	else if(k < 0)
	{
		return 0;
	}
	else 
		return n * Pow(n, k-1);
}

int Index(int x)
{
	int count = 1;
	while(x > 9)
	{
		x = x/10;
		count++;
	}
	return count;
}

int main()
{
	for(int i = 0; i < 100; i++)
	{
		int ret;
		int k = Index(i);
		ret = Pow(i, k);
		printf("%d\n", ret);
	}
	
}