int main()
{
	int arr[] = {5,4,3,2,1};
	int *ptr = (int *)(&arr + 1);
	printf("%d %d\n", *(arr + 1), *(ptr - 1));
   	return 0;
}



int main()
{
	int aa[2][5] = {10, 9, 8, 7,6,5,4,3,2,1};
	int *ptr1 = (int *)(&aa + 1);
	int *ptr2 = (int *)(*(aa + 1));
	printf("%d, %d\n", *(ptr1 - 1), *(ptr2 - 1));
   	return 0;
}



int main()
{
	char arr[] = "ABCD";
	int sz = sizeof(arr) / sizeof(arr[0]);
	int start = 0;
	printf("%d\n", sz);
	while(start + 1 < sz-1)
	{
		char tmp ;
		tmp = arr[start];
		arr[start] = arr[start + 1];
		arr[start + 1] = tmp;
		start ++;
	}
	printf("%s\n", arr);
   	return 0;
}



int main()
{
	char arr[] = "ABCD";
	int sz = sizeof(arr) / sizeof(arr[0]);
	int start = 0;
	printf("%d\n", sz);
	while(start + 2 < sz-1)
	{
		char tmp ;
		tmp = arr[start];
		arr[start] = arr[start + 2];
		arr[start + 2] = tmp;
		start ++;
	}
	printf("%s\n", arr);
   	return 0;
}



// 暴力求解
void left_move(char* arr, int k)
{
	assert(arr);
	int i = 0;
	int len = strlen(arr);
	for(i = 0; i < k; i++)
	{
		char tmp = *arr;
		int j = 0;
		for(j = 0; j < len-1; j++)
		{
			*(arr + j) = *(arr + j + 1);
		}
		*(arr + len - 1) = tmp;
	}
}




int main()
{
	char arr[] = "ABCDEF";
	left_move(arr, 1);
	printf("%s\n", arr);
   	return 0;
}



// 三步翻转


void reverse(char* left, char* right)
{
	assert(left != NULL);
	assert(right != NULL);
	while(left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}

void left_move(char* arr, int k)
{
	assert(arr);
	int len = strlen(arr);
	assert(k <= len);
	reverse(arr, arr + k - 1);  // a -> a^-1
	reverse(arr + k, arr + len - 1); // b -> b^-1
	reverse(arr, arr + len - 1); // (a^-1)(b^-1) -> ((a^-1)(b^-1))^-1
}

int main()
{
	char arr[] = "ABCDEF";
	left_move(arr, 3);
	printf("%s\n", arr);
   	return 0;
}




// 比较字符串，判断一个字符串是否是另一个字符串旋转得来的
void reverse(char* left, char* right)
{
	assert(left != NULL);
	assert(right != NULL);
	while(left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}

void left_move(char* arr, int k)
{
	assert(arr);
	int len = strlen(arr);
	assert(k <= len);
	reverse(arr, arr + k - 1);
	reverse(arr + k, arr + len - 1);
	reverse(arr, arr + len - 1);
}

int is_left_move(char* s1, char* s2)
{
	int len = strlen(s1);
	int i = 0;
	for(i = 0; i < len; i++)
	{
		left_move(s1, 1);
		int ret = strcmp(s1, s2);
		if(ret == 0)
		{
			return 1;
		}
	}
	return 0;
}


int main()
{
	char arr1[] = "abcdef";
	char arr2[] = "cdefab";
	int ret = is_left_move(arr1, arr2);
	if(ret == 1)
	{
		printf("YES\n");
	}
	else
	{
		printf("NO\n");
	}

   	return 0;
}

// 使用strncat函数和strstr函数进行比较
// strncat（追加）， strstr（对比）
int is_left_move(char* s1, char* s2)
{
	int len1 = strlen(s1);
	int len2 = strlen(s2);
	// 判断两个字符串长度是否一致
	if(len1 != len2)
	{
		return 0;
	}
	// 将s1字符串，自我追加
	strncat(s1, s1, len1);
	// 将追加完的字符串和s2进行对比，看看s2是否是s1的子集
	// 如果是则返回非空指针，不是则返回空指针。
	char* ret = strstr(s1, s2);
	if(ret == NULL)
	{
		return 0;
	}
	else
	{
		return 1;
	}
	
	return 0;
}


int main()
{
	char arr1[30] = "abcdef";
	char arr2[] = "cdefab";
	int ret = is_left_move(arr1, arr2);
	if(ret == 1)
	{
		printf("YES\n");
	}
	else
	{
		printf("NO\n");
	}

   	return 0;
}


// 追加字符串
int main()
{
	char arr1[30] = "abc";
	char arr2[] = "def";
	strcat(arr1, arr2);
	printf("%s\n", arr1);

   	return 0;
}



