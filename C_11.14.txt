int main()
{
	int arr[3][3] = {{1,2,3}, {2,3,4}, {3,4,5}};
	int num = 0;
	int i = 0, j = 0;
	while(i < 3)
	{
		if(arr[i][0] > num)
		{
			i --;
			break;
		}
		i ++;
	}
	if(i > 2 || i < 0)
	{
		printf("不存在！");
	}
	else
	{
		for(j = 0; j < 3; j++)
		{
			if(arr[i][j] == num)
			{
				printf("%d\n", arr[i][j]);
				break;
			}
		}
	}
   	return 0;
}






// 杨氏矩阵

int FindNum(int arr[3][3], int k , int row, int col)
{
	int x = 0;
	int y = col-1;
	while(x <= row-1 && y >= 0)
	{
		if(arr[x][y] > k)
		{
			y --;
		}
		else if(arr[x][y] < k)
		{
			x ++;
		}
		else
		{
			return 1;
		}
	}
	return 0;
}

int main()
{
	int arr[3][3] = {{1,2,3}, {2,3,4}, {3,4,5}};
	int k = 7;
	int ret = FindNum(arr, k, 3, 3);
	if(ret == 1)
	{
		printf("找到了！\n");
	}
	else
	{
		printf("没找到！\n");
	}

   	return 0;
}






int FindNum(int arr[3][3], int k , int* px, int* py)
{
	int x = 0;
	int y = *py-1;
	while(x <= *px-1 && y >= 0)
	{
		if(arr[x][y] > k)
		{
			y --;
		}
		else if(arr[x][y] < k)
		{
			x ++;
		}
		else
		{
			*px = x;
			*py = y;
			return 1;
		}
	}
	return 0;
}

int main()
{
	int arr[3][3] = {{1,2,3}, {2,3,4}, {3,4,5}};
	int x = 3;
	int y = 3;
	int k = 5;
	int ret = FindNum(arr, k, &x, &y);
	if(ret == 1)
	{
		printf("下标为： %d %d\n", x, y);
		printf("找到了！\n");
	}
	else
	{
		printf("没找到！\n");
	}

   	return 0;
}







int my_strlen(const char *arr)
{
	int count = 0;
	assert(arr != NULL);
	while(*arr)
	{
		count++;
		arr++;
	}
	return count;
}


int main()
{
	char arr[] = "abcdef";
	int count = my_strlen(arr);
	printf("%d\n", count);
	printf("%d\n", strlen(arr));
   	return 0;
}





int main()
{
	if(strlen("abc") - strlen("abcedf") > 0)
		printf("hehe\n");
	else
		printf("haha\n");
   	return 0;
}






char* my_strcpy(char* dest, const char* src)
{
	assert(dest != NULL);
	assert(src != NULL);
	char* ret = dest;
	// 将src指针所指向的内容拷贝到dest的空间中，包含“\0”
	while(*dest++ = *src++);
	// 返回起始地址
	return ret;
}


int main()
{
	char arr1[] = "abcdefhig";
	char arr2[] = "world";
	my_strcpy(arr1, arr2);
	printf("%s\n", arr1);
   	return 0;
}



char* my_strcat(char* dest, const char* src)
{
	assert(dest);
	assert(src);
	char* ret = dest;
	// 找到追加的字符‘\0’
	while(*dest != '\0')
	{
		dest++;
	}
	// 追加
	while(*dest++ = *src++);
	return ret;
}


int main()
{
	char arr1[30] = "hello";
	char arr2[] = "world";
	my_strcat(arr1, arr2);
	printf("%s\n", arr1);
   	return 0;
}