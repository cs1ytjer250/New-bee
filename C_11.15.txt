#include <string.h>

int main()
{
	char* p1 = "bbc";
	char* p2 = "zbc";
	// > 1
	// == 0
	// < -1(随机值)
	int ret = strcmp(p1, p2);
	printf("%d\n", ret);
   	return 0;
}




int main()
{
	char* p1 = "bbc";
	char* p2 = "abc";
	int ret = strcmp(p1, p2);
	if(ret > 0)
	{
		printf("P1 > P2\n");
	}
	else if(ret == 0)
	{
		printf("P1 = P2\n");
	}
	else if(ret < 0)
	{
		printf("P1 < P2\n");
	}
   	return 0;
}




#include <assert.h>

int my_strcmp(const char* p1, const char* p2)
{
	assert(p1 && p2);
	while(*p1 == *p2)
	{
		if(*p1 == '\0')
		{
			return 0; // 相等
		}
		p1++;
		p2++;
	}
	if(*p1 > *p2)
	{
		return 1;  // 大于
	}
	else
	{
		return -1; // 小于
	}
}


int main()
{
	char* p1 = "abczv";
	char* p2 = "abc";
	int ret = my_strcmp(p1, p2);
	printf("ret = %d\n", ret);
   	return 0;
}




int my_strcmp(const char* p1, const char* p2)
{
	assert(p1 && p2);
	while(*p1 == *p2)
	{
		if(*p1 == '\0')
		{
			return 0; // 相等
		}
		p1++;
		p2++;
	}
	return (*p1 - *p2);  // 返回一个大于0或者小于0的数
}


int main()
{
	char* p1 = "abc";
	char* p2 = "zbc";
	int ret = my_strcmp(p1, p2);
	printf("ret = %d\n", ret);
   	return 0;
}



int main()
{
	char p1[10] = "abcdefghi";
	char p2[] = "bit";
	strncpy(p1, p2, 3);
	printf("%s\n", p1);
   	return 0;
}




int main()
{
	char p1[30] = "hello\0xxxxxxxxxxx";
	char p2[] = "world";
	strncat(p1, p2, 2);
	printf("%s\n", p1);
   	return 0;
}



// leetcode 两数之和

// 暴力求解
int main()
{
	int arr[] = {2,7,11,15};
	int target = 22;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int i = 0;
	int j = 0;
	while(i < sz)
	{
		if(arr[i] < target)
		{
			for(j = i; j < sz; j++)
			{
				if(arr[i] + arr[j] == target)
				{
					printf("%d %d\n", i, j);
					break;
				}
			}
		}
		i ++;
	}
   	return 0;
}


// 暴力求解
int main()
{
	int arr[] = {2,7,11,15};
	int target = 22;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int i = 0;
	int j = 0;
	for(i = 0; i < sz; i++)
	{
		for(j = i + 1; j < sz; j++)
		{
			if(arr[i] + arr[j] == target)
				printf("%d %d\n", i, j);
		}
	}
   	return 0;
}