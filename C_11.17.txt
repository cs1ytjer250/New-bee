// 求素数
int main()
{
	int count;
	int j;
	for(int i=101; i<201; i+=2){
		for(j=2; j<=i/2; j++){
			if(i%j==0)
				break;
		}
		if(j>i/2){
			count++;
			printf("%d ", i);
		}
	}
	printf("\n%d", count);
}




// 数9
int main()
{
	int count;
	for(int i=0; i<100; i++){
		if(i%10==9){
			printf("%d ", i);
			count++;
		}
		if(i/10==9){
			printf("%d ", i);
			count++;
		}
	}
	printf("\n%d", count);

}



// 求分数之和
int main()
{
	double count = 0.0;
	double num = 1.0;
	for(int i=1; i<101; i++){
		count += num * 1.0/i;
		num = -num;
		//printf("%lf ", num);
	}
	printf("%lf ", count);
}



// 输出最大值
int main()
{
	int arr[] = {-1,-2,-3,-4,-5,-6,-7,-8,-9,0};
	int max = arr[0];
	int sz = sizeof(arr)/sizeof(arr[0]);
	for(int i=0; i<sz; i++){
		if(max<arr[i])
			max = arr[i];
	}
	printf("%d ", max);
}



// 乘法口诀表
int main()
{
	for(int i=1; i<10; i++){
		for(int j=1; j<=i; j++){
			printf("%d*%d=%-2d  ", i, j, i*j);
		}
		printf("\n");
	}
}




// 二分查找
int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int num = 2;
	int left = 0;
	int right = sizeof(arr)/sizeof(arr[0])-1;
	int sz =sizeof(arr)/sizeof(arr[0]);
	int mid;
	while(left<=right){
		mid = (left+right)/2;
		if(arr[mid] == num){
			printf("下标为：%d\n", mid);
			break;
		}
		else if(arr[mid]<num) left = mid+1;
		else right = mid-1;
	}
	if(left>right)
		printf("没找到。。");
}




// 斐波那契数列（递归算法）
int Fib(int x){
	if(x<=2)
		return 1;
	else
		return Fib(n-1) + Fib(n-2);
}

Time = O(2^n)

***************************************************

// 斐波那契数列（迭代算法）
int Fib(int x){
	int a=1, b=1; c=1;
	while(x>2){
		c = a+b;
		a = b; 
		b = c;
		x--;
	}	
}

Time = O(n)


***************************************************

// 逆序数组
void bobble_sort(int arr[], int n){
	int left = 0;
	int right = n-1;
	for(int i=0; i<=n/2; i++){
		int temp = 0;
		temp = arr[left];
		arr[left] = arr[right];
		arr[right] = temp;
		left++;
		right--;
	}
}

int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	bobble_sort(arr, 10);
	for(int i=0; i<10; i++)
		printf("arr[%d]=%d\n", i, arr[i]);
}
Time = O(n)

**************************************************
// 冒泡排序
void bobble_sort(int arr[], int n){
	int i = 0;
	// 判断是否为升序
	int flag = 1;

	int temp;

	// 循环趟数
	for(int j = 0; j<n-1; j++)
	{
		// 对比次数
		for(i = 0; i<n-1-j; i++)
		{
			if(arr[i]>arr[i+1])
			{
				temp = arr[i];
				arr[i] = arr[i+1];
				arr[i+1] = temp;
				flag = 0;
			}
		}
		if(flag==1)
			break;
	}
}

int main()
{
	int arr[] = {9,8,7,6,5,4,3,2,1,};
	int sz = (sizeof(arr)/sizeof(arr[0]));
	bobble_sort(arr, sz);
	for(int i=0; i<sz; i++)
		printf("arr[%d]=%d\n", i, arr[i]);
}

Time = O(n^2)