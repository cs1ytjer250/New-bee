void test(void)
{
	printf("hehe\n");
}


int main()
{
	test(100);
   	return 0;
}



int  check_sys()
{
	int a = 1;
	char* p = (char*)&a;
	return *p;
}

int  check_sys2()
{
	int a = 1;
	return *(char*)&a;
}


int main()
{
	int ret = check_sys();
	if(ret == 1)
	{
		printf("小端");
	}
	else
	{
		printf("大端");
	}
   	return 0;
}


// 整型提升，有无符号。
int main()
{
	char a = -1;
	signed char b = -1;
	unsigned char c = -1;
	printf("%d\n, %d\n, %d\n,", a, b, c);
   	return 0;
}

// %u 输出十进制无符号整型。
// -128的有符号二进制数：1000 0000
// 128的有符号二进制数： 1000 0000
int main()
{
	char a = -128;
	char b = 128;
	int c = 128;
	printf("%u\n", a);
	printf("%u\n", b);
	printf("%u\n", c); // 输出128
   	return 0;
}


// -10进位。%d 输出有符号数。
int main()
{
	int a = -20;
	unsigned int b = 10;
	printf("%d\n", a + b);
   	return 0;
}

// 无符号数，循环条件恒成立。 死循环
int main()
{
	unsigned int i;
	for(i = 9; i >= 0; i--)
	{
		printf("%u\n", i);
	}
   	return 0;
}


// char -- 8位，表示的范围127-（-128）共256个数
int main()
{
	char arr[1000];
	int i;
	for(i = 0; i < 1000; i++)
	{
		arr[i] = -1 - i;
	}
	printf("%d\n", strlen(arr));
   	return 0;
}



// 死循环
int main()
{
	unsigned char i;
	for(i = 0; i <=255; i++)
	{
		printf("hello world\n");
	}
	return 0;
}




char Print(char *str)
{
	printf("%s\n", str);
}

int main()
{
	void(*signal(int, void(*)(int)))(int);
	typedef void(*pfun_t)(int);
	pfun_t signal(int, pfun_t);
   	return 0;
}



char Print(char *str)
{
	printf("%s\n", str);
}

int main()
{
	char(*pa)(char*) = Print;
	(*pa)("nihao");
	pa("nihao2");
   	return 0;
}




int Add(int x, int y)
{
	return x + y;
}
int Mul(int x, int y)
{
	return x * y;
}
int Sub(int x, int y)
{
	return x - y;
}
int Div(int x, int y)
{
	return x / y;
}


int main()
{
	int a = 10;
	int b = 20;
	int (*pa)(int, int) = Div;
	int (*parr[4])(int, int) = {Add, Sub, Mul, Div};
	int i = 0;
	for(i = 0; i < 4; i++)
	{
		printf("%d\n", parr[i](a, b));
	}
   	return 0;
}