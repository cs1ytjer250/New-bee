/* 查找元素:按位查找

// 定义最大长度
#define InitSize 10

// 创建构造函数
typedef struct{
	int *data; // 列表的起始地址的指针
	int Maxsize;
	int length;
}Sqlist;

// 初始化
void Initlist(Sqlist &L){
	// malloc函数申请一整片空间，并返回起始地址指针
	L.data = (int *)malloc(InitSize*sizeof(int));
	L.length = 0;
	L.Maxsize = InitSize;
}

// 查找元素
int Getelem(Sqlist L, int i){
	// 用指针查找元素（列如：起始地址为1000，元素大小为4，那么第一个元素就是1000-1004空间中的数据）
	return L.data[i-1];
}

// 程序入口
int main(){
	// 创建列表
	Sqlist L;
	// 初始化列表
	Initlist(L);
	// 添加列表元素
	for(int i=0; i<4; i++){
		L.data[i]=i*2;
		printf("L[%d]= %d\n", i+1, L.data[i]);
	}
	// 获得元素值
	printf("当前值为：%d\n",Getelem(L, 3));
}
*/

/* 查找元素：按值查找

// 定义最大长度
#define InitSize 10

// 创建构造函数
typedef struct{
	int *data; // 列表的起始地址的指针
	int Maxsize;
	int length;
}Sqlist;

// 初始化
void Initlist(Sqlist &L){
	// malloc函数申请一整片空间，并返回起始地址指针
	L.data = (int *)malloc(InitSize*sizeof(int));
	L.length = 0;
	L.Maxsize = InitSize;
}

// 查找元素
int LocateElem(Sqlist L, int e){
	// 将查找对象和被查找对象进行比对
	for(int i=0; i<L.length; i++)
		// 比对成功，返回该元素的位序（位序从1开始，所以要加1）
		if(L.data[i] == e)
			return i+1;
	return 0;
}
// 程序入口
int main(){
	// 创建列表
	Sqlist L;
	// 初始化列表
	Initlist(L);
	// 添加列表元素
	for(int i=0; i<6; i++){
		L.data[i]=i+1;
		printf("L[%d]= %d\n", i+1, L.data[i]);
		L.length++;
	}
	// 获得元素值
	printf("当前位序为：%d\n",LocateElem(L, 6));
}
*/


// 删除元素，并返回值
bool Del_Min(Sqlist &L){
	// 判断列表是否为空
	if(L.length==0)
		return false;
	// 创建对比对象
	int value = L.data[0];
	// 下标计数
	int pos = 0;
	// 循环比对列表元素
	for(int i=0; i<L.length; i++){
		// 如果比对元素比被比对元素小，则替换比对元素，并用计数器记录下标
		if(L.data[i]<value){
			value = L.data[i];
			pos = i;
		}
	}
	// 用表尾元素，替换最小元素，并将表长减1
	L.data[pos] = L.data[L.length-1];
	L.length--;
	return true;
}

// 翻转顺序表
void Reverse(Sqlist &L){
	// 零时变量
	int temp=0;
	// 遍历前半部分顺序表
	for(int i=0; i<L.length/2;i++){
		// 保存当前元素
		temp = L.data[i];
		// 翻转前半部分元素
		L.data[i] = L.data[L.length-i-1];
		// 翻转后半部分元素
		L.data[L.length-i-1] = temp;
	}
}


// 删除指定元素
void def_x_2(Sqlist &L, int x){
	// 用k记录要删除的个数
	int k=0, i=0;
	// 循环比对是否是要删除的元素
	while(i<L.length){
		// 如果是，则计数器加1
		if(L.data[i] == x)
			k++;
		// 如果不是，则将当前元素前移k个位置
		else{
			L.data[i-k]=L.data[i];
		}
		i++;
	}
	// 表长递减
	L.length=L.length-k;
}




// 查找主元素（当前列表中最多的元素，并且个数多余一半表长）

int Majority(Sqlist L, int n){
	// c为候选主元素，count记录个数
	int i, c, count=1;
	c = L.data[0];


	for(i=1; i<n; i++){
		// 如果当前扫描对象是候选主元素，则count++
		if(L.data[i] == c)
			count++;
		// 不是，count--，当count=0时，则替换主元素
		else{
			if(count > 0)
				count--;
			else{
				c = L.data[i];
				count = 1;
			}
		}
	}


		// 统计主元素实际出现的次数
		if(count>0){
			for(i=count=0; i<n; i++){
				if(L.data[i] == c)
					count++;
			}
		}
		// 判断是否大于一半表长
		if(count>n/2) return c;
		else return -1;
}

Time = O(n),  Space = O(1)



******************************************************


// 找到列表中未出现的最小正整数
int findMissMin(Sqlist L, int n){
	int i, *B;

	// 创建一个空列表，用于保存扫描返回值
	// 用malloc分配空间，该函数最后返回一个空间起始指针
	B = (int *)malloc(sizeof(int)*n);

	// memset函数，将一个空列表初始化
	memset(B, 0, sizeof(int)*n);


	// 扫描A列表，此时的i为下标
	for(i=0; i<n; i++){
		// 若A[i]的值介于1-n，则将值一个个复制到B
		if(L.data[i]>0 && L.data[i]<=n)
			B[L.data[i]-1] = 1;
	}


	// 扫描B列表，找到目标值
	for(i=0; i<n; i++)
		if(B[i]==0) break;
	// 返回结果，此时的i为值
	return i+1;
}

Time = O(n)

******************************************************

// 求绝对值
int abs_(int a){
	if(a<0) return -a;
	else return a;
}

// 判断a是否为最小
bool xls_min(int a, int b, int c){
	if(a<=b && a<=c) return true;
	return false;
}

// 找出三个集合中最小的距离
int findMinofTrip(int A[], int n, int B[], int m, int C[], int p){
	// D_min用于记录最小值，初值为INT_MAX
	int i=0, j=0, k=0, D_min= INT_MAX, D;

	// 循环开始，开始条件为：起始下标小于对应数组最大下标，且D_min大于0
	while(i<n && j<m && k<p && D_min>0){
		// 计算D
		D = abs_(A[i]-B[j]) + abs_(B[j]-C[k]) + abs_(C[k]-A[i]);
		// 更新D
		if(D<D_min) D_min = D;
		// 更新 a
		if(xls_min(A[i], B[j], C[k])) i++;
		else if(xls_min(B[j], C[k], A[i])) j++;
		else k++;
	}
	return D_min;
}

Time = O(N)   Space = O(1)