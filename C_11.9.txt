int main()
{
	unsigned long pulArray[] = {6,7,8,9,10};
	unsigned long *pulPtr;
	pulPtr = pulArray;
	*(pulPtr + 3) += 3;
	printf("%d, %d\n", *pulPtr, *(pulPtr + 3));
   	return 0;
}




void Reverse_ch(char arr[])
{
	int i = 0;
	int sz = strlen(arr);
	char tmp;
	for(i = 0; i < (sz-1)/2; i++)
	{
		tmp = arr[i];
		arr[i] = arr[sz-1-i];
		arr[sz-1-i] = tmp;
	}
}

int main()
{
	char arr[] = "abcdef";
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	Reverse_ch(arr);
	printf("%s\n", arr);

   	return 0;
}




#include <stdio.h>
#include <string.h>
#include <assert.h>


void Reverse_ch(char* arr)
{
	assert(arr);
	int len = strlen(arr);
	char* left = arr;
	char* right = arr + len - 1;
	
	while(left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}

int main()
{
	char arr[] = "abcdef";
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	Reverse_ch(arr);
	printf("%s\n", arr);

   	return 0;
}




void Reverse_ch(char* arr)
{
	assert(arr);
	int len = strlen(arr);
	char* left = arr;
	char* right = arr + len - 1;
	
	while(left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}

int main()
{
	char arr[] = "abc def";
	gets(arr); // 功能和scanf相似，不同的在于，gets是识别一行，遇到换行符才接收完毕。scanf接收空格前的字符串
	Reverse_ch(arr);
	printf("%s\n", arr);

   	return 0;
}



int Sum(int Num, int index)
{
	if(index > 0)
	{
		Num = Num + (Num * 10);
	}
	return Num += Sum(Num, index-1);
}


int main()
{
	int a = 2;
	int n = 5;
	int sum = 0;
	int i = 0;
	int ret = 0;
	for(i = 0; i < n; i++)
	{
		ret = ret * 10 + a;
		sum += ret;
	}
	printf("%d\n", sum);
   	return 0;
}



// 水仙花数
int my_pow(int x, int y)
{
	if(y > 1)
	{
		x = x * my_pow(x, y-1);
	}
	return x;
}

int main()
{
	int i = 0;
	for(i = 0; i < 100000; i++)
	{
		int tmp = i;
		int sum = 0;
		int n = 1;
		while(tmp /= 10)
		{
			n ++;
		}
		tmp = i;
		while(tmp)
		{
			//sum += (int)pow(tmp % 10, n);
			sum += my_pow(tmp % 10, n);
			tmp /= 10;
		}
		if(i == sum)
		{
			printf("%d\n", sum);
		}
	}
   	return 0;
}




// 打印菱形
int main()
{
	int line = 10;
	int i = 0;
	for(i = 0; i < line; i++)
	{
		int j = 0;
		for(j = 0; j < line-1-i; j++)
		{
			printf(" ");
		}
		for(j = 0; j < 2*i+1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	for(i = 0; i < line - 1; i++)
	{
		int j = 0;
		for(j = 0; j <= i; j++)
		{
			printf(" ");
		}
		for(j = 0; j < 2*(line-1-i)-1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
   	return 0;
}