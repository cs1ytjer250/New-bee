
// 按位查找（带头节点单链表）
bool GetElem(Linklist L, int i){
	// 节点合法性判断
	if(i<0)
		return NULL;
	// 指针P指向当前扫描到的节点		
	LNode *p;


	// 当前p指想的是第几个节点
	int j=0;


	// L指向头结点，头结点是第0个节点（不存数据）
	p=L;


	// 循环找到第i个节点
	while(p!=NULL && j<i){
		p = p->next;
		j++;
	}
	return p;
}
Time = O(n)
**************************************************


// 按值查找，找到数据域==e的节点（带头节点）
bool LocateEle(Linklist L, int e){
	LNode *p = L->next;

	// 从第1个节点开始查找数据域为e的节点
	while(p!=NULL && p->data != e)
		p = p->next;

	// 找到后返回该节点指针，否则返回NULL
	return p;
}
Time = O(n^2)

**************************************************

// 求表长
int Length(Linklist L){

	// 统计表长
	int len = 0;

	LNode *p = L;
	while(p->next != NULL){
		p = p->next;
		len++;
	}
	return len;
}
Time = O(n)
*************************************************
// 正向建立单链表
Linklist List_TailInsert(Linklist &L){
	// 舍ElemType为整型
	int x=1;

	// 建立头节点
	L=(Linklist)malloc(sizeof(LNode));

	// r为表尾指针
	LNode *s, *r = L;

	// 输入节点的值
	scanf("%d", &x);

	// 输入9999表示结束
	while(x!=10){
		// 在r节点之后插入元素x
		s = (LNode *)malloc(sizeof(LNode));
		s->data = x;
		r->next = s;

		// r指向新的表位节点
		r = s;
		scanf("%d", &x);
	}

	// 尾节点指针置空
	r->next = NULL;
	return L;
}

Time = O(n)

*******************************************************

// 逆向建立单链表
Linklist List_HeadInsert(Linklist &L){
	LNode *s;
	int x;
	// 创建头结点
	L=(Linklist)malloc(sizeof(LNode));

	// 初始为空链表
	L->next = NULL;

	// 输出节点的值
	scanf("%d", &x);

	// 输入9999表示结束
	while(x!=10){

		// 创建新节点
		s = (LNode *)malloc(sizeof(LNode));
		s->data = x;
		s->next = L->next;

		// 将新节点插入表中，L为头指针
		L->next = s;
		scanf("%d", &x);
	}
	r->next = NULL;
	return L;
}
Time = O(n)