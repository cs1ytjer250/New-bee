bool Del_Min(SqList &L, int value)
{
	if(L.length == 0)
	{
		return false;
	}
	value = L.data[0];
	int pos = 0;
	for(int i = 0; i < L.length; i++)
	{
		if(L.data[i] < value)
		{
			value = L.data[i];
			pos = i;
		}
	}
	L.data[pos] = L.data[L.length - 1];
	L.length--;
	return true;
}




void Reverse(SqList &L)
{
	int temp;
	for(int i = 0; i < L.length; i++)
	{
		temp = L.data[i];
		L.data[i] = L.data[L.length - 1];
		L.data[L.length-1] = temp;
	}
}





void del_x_l(SqList &L, int x)
{
	int k = 0, i;
	for(i = 0; i < L.length; i++)
	{
		if(L.data[i] != x)
		{
			L.data[k] = L.data[i];
			k++;
		}
	}
	L.length = k;
}

void del_x_l2(SqList &L, int x)
{
	int k = 0, i = 0;
	while(i < L.length)
	{
		if(L.data[i] == x)
			k++;
		else
			L.data[i-k] = L.data[i];
		i++;
	}
	L.length = L.length - k;
	
}




bool Del_s_t2(SqList &L, int x , int t)
{
	int i, j;
	if(s >= t || L.length == 0)
	{
		return false;
	}
	for(i = 0; i< L.length && L.data[i] < s; i++);
	if(i >= L.length)
		return false;
	for(j = i; j < L.length && L.data[j] <= t; j++);
	for(; j < L.length; i++, j++)
		L.data[i] = L.data[j];
	L.length = i;
	return true;
}


bool Del_s_t1(SqList &L, int s , int t)
{
	int i, k = 0;
	if(L.length == 0 || s >= t)
		return false;
	for(i = 0; i < L.length; i++)
	{
		if(L.data[i] >= s && L.data[i] <= t)
			k++;
		else
			L.data[i-k] = L.data[i];
	}
	L.length -= k;
	return true;
}



bool Delete_Same(SqList &L)
{
	if(L.length == 0)
		return false;
	int i, j;
	for(i = 0; i < L.length; i++)
	{
		if(L.data[i] != L.data[j])
			L.data[++i] = L.data[j];
	}
	L.length = i+1;
	return true;
}

bool Merge(SqList A, SqList B, SqList C)
{
	if(A.length + B.length > C.maxSize)
		return false;
	int i = 0, j = 0, k = 0;
	while(i < A.length && j < B.length)
	{
		if(A.data[i] <= B.data[j])
			C.data[k++] = A.data[i++];
		else
			C.data[k++] = B.data[j++];
	}
	while(i < A.length)
		C.data[k++] = A.data[i++];
	while(j < B.length)
		C.data[k++] = B.data[j++];
	C.length = k;
	return true;
}



typedef int DataType;
void Reverse(DataType A[], int left, int right, int arraySize)
{
	if(left >= right || right >= arraySize)
		return false;
	int mid = (left + right) / 2;
	for(int i = 0; i <+ mid-left; i++)
	{
		DataType temp = A[left + i];
		A[left + i] = A[right - i];
		A[right - i] = temp;
	}
}

void Exchange(DataType A[], int left, int right, int arraySize)
{
	Reverse(A, 0, m+n-1, arraySize);
	Reverse(A, 0, n-1, arraySize);
	Reverse(A, 0, m+n-1, arraySize);
}




void SearchExchange(int A[], int x)
{
	int low = 0, hight = L.length-1, mid;
	while(low <= high)
	{
		mid = (low + high)/2;
		if(A[mid] == x) break;
		else if(A[mid] < x) low = mid+1;
		else right = mid-1;
	}
	if(A[mid] == x && mid != L.length-1)
	{
		t = A[mid]; A[mid] = A[mid + 1]; A[mid + 1] = t;
	}
	if(low > right)
	{
		for(int i = L.length-1; i > high; i--) A[i+1] = A[i];
		A[i + 1] = x;
	}
}

void Reverse(int R[], int from, int to)
{
	int i, temp;
	for(i = 0; i < (to - from + 1) / 2; i++)
	{
		temp = R[from + i]; R[from + i] = R[to - i]; R[to - i] = temp;
	}
}

void Converse(int R[], int n, int p)
{
	Reverse(R, 0, p-1);
	Reverse(R, p, n-1);
	Reverse(R, 0, n-1);
}





int M_Search(int A[], int B[], int n)
{
	int s1 = 0, d1 = n-1, m1, s2 = 0, d2 = n-1, m2;
	while(s1 != d1 || s2 != d2)
	{
		m1 = (s1 + d1) / 2;
		m2 = (s2 + d2) / 2;
		if(A[m1] == B[m2])
			return A[m1];
		if(A[m1] < B[m2])
		{
			if((s1 + d1) % 2 == 0)
			{
				s1 = m1;
				d2 = m2;
			}
			else
			{
				s1 = m1 + 1;
				d2 = m2;
			}
		}
		else
		{
			if((s2 + d2) % 2 == 0)
			{
				d1 = m1 ;
				s2 = m2;
			}
			else
			{
				d1 = m1;
				s2 = m2+1;
			}
		}
	}
	return A[s1] < B[s2] ? A[s1] : B[s2];
		
}



int Majority(int A[], int n)
{
	int i, c, count = 1;
	c = A[0];
	for(i = 1, i < n, i++)
	{
		if( A[i] == c)
			count++;
		else
		{
			if(count > 0)
				count --;
			else
			{
				c = A[i];
				count = 1;
			}
		}
	}
	if(count > 0)
	{
		for(i = count = 0; i < n; i++)
		{
			if(A[i] == c)
				count ++;
		}
	}
	if(count > n/2) return c;
	else return -1;
}





int findMissMin(int A[], int n)
{
	int i, *B;
	B = (int *)malloc(sizeof(int) * n);
	memset(B, 0, sizeof(int) * n);
	for(i = 0; i< n; i++)
	{
		if(A[i] > 0 && A[i] <= n)
			B[A[i]-1] = 1;
	}
	for(i = 0, i < n; i++)
	{
		if(B[i] == 0)break;
	}
	return i+1;
}	



#define INT_MAX 0xfffffff

int abs_(int a)
{
	if(a < 0) return -a;
	else return a;
}

bool xls_min(int a, int b, int c)
{
	if(a <= b && a <= c) return true;
	return false;
}

int findMinofTrip(int A[], int n, int B[], int m, int C[], int p)
{
	int i = 0, j = 0, k = 0, D_min = INT_MAX, D;
	while(i < n && j < m && k < p && D_min > 0)
	{
		D = abs_(A[i] - B[j]) + abs_(B[j] - C[k]) + abs_(C[k] - A[i]);
		if(D < D_min) D_min = D;
		if(xls_min(A[i], B[j], C[k])) i ++;
		else if(xls_min(B[j], C[k], A[i])) j++;
		else k++;
	}
	return D_min;
}