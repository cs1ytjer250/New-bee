// 寻找单链表中的环路（不带头）


LNode* FindLoopStart(LNode *head)
{
	LNode *fast = head, *slow = head;
	while(fast != NULL && fast->next != NULL)
	{
		slow = slow->next;
		fast = fast->next->next;
		if(slow == fast) break;
	}
	if(slow == NULL || fast->next == NULL)
		return NULL;
	LNode *p1 = head, *p2 = slow;
	while(p1 != p2)
	{
		p1 = p1->next;
		p2 = p2->next;
	}
	return p1;
}



// 查找单链表中倒数第k个位置的节点值


int Search_k(LinkList L, int k)
{
	LNode *p = L->next, *q = L->next;
	int count = 0;
	while(p != NULL)
	{
		if(count < k) count++;
		else
		{
			q = q->next;
		}
		p = p->next;
	}
	if(count < k)
		return 0;
	else
	{
		printf("%d", q->data);
		return 1;
	}
}



// 找到公共指针（带头节点）

LNode* find_addr(LNode *str1, LNode *str2)
{
	int m, n;
	LNode *p, *q;
	m = length(str1);
	n = length(str2);
	for(p = str1; m > n; m--)
		p = p->next;
	for(q = str2; m < n; n--)
		q = q->next;
	while(p->next != NULL && p->next != q->next)
	{
		p = p->next;
		q = q->next;
	}
	return p->next;
}



// 删除链表中绝对值相等的节点 


void func(LinkList L, int n)
{
	LNode *p = L, *r;
	int *q, m;
	q = (int *)malloc(sizeof(int) * (n+1));
	for(int i = 0; i < n+1; i++)
		*(q + i) = 0;
	while(p->next != NULL)
	{
		m = p->next->data > 0? p->next->data: - p->next->data;
		if(*(q + m) == 0)
		{
			*(q + m) = 1;
			p = p->next;
		}
		else
		{
			r = p->next;
			p->next = r->next;
			free(r);
		}
	}
	free(q);
}



// 将链表重新排序

void change_list(LinkList h)
{
	LNode *p, *q, *r, *s;
	p = q = h;
	while(q->next != NULL)
	{
		p = p->next;
		q = q->next;
		if(q->next != NULL) q = q->next;
	}
	q = p->next;
	p->next = NULL;
	while(q != NULL)
	{
		r = q->next;
		q->next = p->next;
		p->next = q;
		q = r;
	}
	s = h->next;
	q = p->next;
	p->next = NULL;
	while(q != NULL)
	{
		r = q->next;
		q->next = s->next;
		s->next = q;
		s = q->next;
		q = r;
	}
}