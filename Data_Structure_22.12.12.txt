// 栈：基本操作


#include <iostream>
using namespace std;

#define MaxSize 10

typedef struct 
{
	int top;
	int top2;
	int data[MaxSize];
}SqStack;

void InitStack(SqStack &S)
{
	//S.top = -1;
	S.top = -1;
	S.top2 = MaxSize;
}

bool StackEmpty(SqStack S)
{
	if(S.top == -1)
		return true;
	else
		return false;
}

bool Push(SqStack &S, int x)
{
	if(S.top == MaxSize-1)
		return false;
	// S.data[++S.top] = x; 
	S.top = S.top + 1;
	S.data[S.top] = x;
	return true;
}

bool Pop(SqStack &S, int &x)
{
	if(S.top == -1)
		return false;
	// x = S.data[S.top--];
	x = S.data[S.top];
	S.top = S.top - 1;
	return true;
}

bool GetTop(SqStack S, int &x)
{
	if(S.top == -1)
		return false;
	x = S.data[S.top];
	return true;
}

void testStack()
{
	SqStack S;
	InitStack(S);
}
int main()
{
	
   	return 0;
}


// 链栈：基本操作？

#include <iostream>
using namespace std;

#define MaxSize 10

typedef struct Linknode
{
	int data;
	struct Linknode *next;
}*LiStack;

bool InitLinknode(LiStack &S)
{
	S = (Linknode*)malloc(MaxSize * sizeof(Linknode));
	if(S == NULL)
		return false;
	S->next = NULL;
}

bool EmptyLiStack(LiStack S)
{
	if(S->next == NULL)
		return true;
	else
		return false;
}

bool Get_top(LiStack S, int &x)
{
	if(S == NULL)
		return false;
	x = S->next->data;
	return true;
}

bool Pop_LiStack(LiStack &S, int &x)
{
	Linknode *p;
	if(S == NULL)
		return false;
	x = S->next->data;
	p = S->next;
	S->next = p->next;
	free(p);
	return true;
}

bool Push_LiStack(LiStack &S, int x)
{
	if(S == NULL)
		return false;
	Linknode *p = (Linknode*)malloc(sizeof(Linknode));
	p->next = S->next;
	p->data = x;
	S->next = p;
	return true;
	
}

int main()
{
	
   	return 0;
}




// 队列：基本操作

#include <iostream>
using namespace std;

#define MaxSize 10

typedef struct
{
	int data[MaxSize];
	int front, rear;
}SqQueue;

bool GetHead(SqQueue Q, int &x)
{
	if(Q.rear == Q.front)
		return false;
	x = Q.data[Q.front];
	return true;
}

bool DeQueue(SqQueue &Q, int &x)
{
	if(Q.front == Q.rear)
		return false;
	x = Q.data[Q.front];
	Q.front = (Q.front + 1) % MaxSize;
	return true;
}
bool EnQueue(SqQueue &Q, int x)
{
	if((Q.rear + 1 ) % MaxSize == Q.front)
		return false;
	//Q.data[Q.rear++] = x;
	Q.data[Q.rear] = x;
	Q.rear = (Q.rear + 1) % MaxSize;
	return true;
}

void InitQueue(SqQueue &Q)
{
	Q.rear = Q.front = 0;
}

bool QueueEmpty(SqQueue Q)
{
	if(Q.rear == Q.front)
		return true;
	else
		return false;
}
void testQueue()
{
	SqQueue Q;
	InitQueue(Q);
}

int main()
{
	
   	return 0;
}