#include <iostream>
using namespace std;

typedef struct LinkNode
{
	int data;
	struct LinkNode *next;
}LinkNode;


typedef struct 
{
	struct LinkNode *front, *rear;
}LinkQueue;



void InitQueue(LinkQueue &Q)
{
	Q.front = Q.rear = (LinkNode*)malloc(sizeof(LinkNode));
	Q.front->next = NULL;
	
	// Q.front = NULL;
	// Q.rear = NULL;
}

bool IsEmpty(LinkQueue Q)
{
	if(Q.front == Q.rear)
		return true;
	else
		return false;
	
	// if(Q.front == NULL)
	// 		return ture;
	// else
	// 		return false;
}


void EnQueue(LinkQueue &Q, int x)
{
	LinkNode *s = (LinkNode*)malloc(sizeof(LinkNode));
	s->data = x;
	s->next = NULL;
	Q.rear->next = s;
	Q.rear = s;
	
	
	if(Q.front == NULL)
	{
		Q.front = s;
		Q.rear = s;
	}
	else
	{
		Q.rear->next = s;
		Q.rear = s;
	}
}


bool DeQueue(LinkQueue &Q, int &x)
{
	if(Q.front == Q.rear)
		return false;
	LinkNode *p = Q.front->next;
	x = p->data;
	Q.front->next = p->next;
	if(Q.rear == p)
		Q.rear = Q.front;
	free(p);
	return true;
}

bool DeQueue2(LinkQueue &Q, int &x)
{
	if(Q.front == Q.rear)
		return false;
	LinkNode *p = Q.front;
	x = p->data;
	Q.front = p->next;
	if(Q.rear == p)
	{
		Q.front = NULL;
		Q.rear = NULL
	}
	free(p);
	return true;
}

void testLinkQueue()
{
	LinkNode Q;
	InitQueue(Q);
}

int main()
{
	
   	return 0;
}



// ¿®∫≈∆•≈‰



#include <iostream>
//#include <stdlib.h>
using namespace std;

#define MaxSize 10

typedef struct 
{
	int top;
	char data[MaxSize];
}SqStack;




bool Pop(SqStack &S, char &c)
{
	if(S.top == -1)
		return false;
	c = S.data[S.top--];
	return true;
}

bool Push(SqStack &S, char c)
{
	S.data[++S.top] = c;
	return true;
}

void InitStack(SqStack &S)
{
	S.top = -1;
	
}

bool StackEmpty(SqStack S)
{
	if(S.top == -1)
		return false;
	else
		return true;
}



bool bracketCheck(char str[], int length)
{
	SqStack S;
	InitStack(S);
	for(int i = 0; i < length; i++)
	{
		if(str[i] == '(' || str[i] == '[' || str[i] == '{')
		{
			Push(S, str[i]);
		}
		else
		{
			if(StackEmpty(S))
				return false;
			char topElem;
			Pop(S, topElem);
			if(str[i] == ')' && topElem != '(')
				return false;
			if(str[i] == '[' && topElem != ']')
				return false;
			if(str[i] == '{' && topElem != '}')
				return false;
		}
	}
	return StackEmpty(S);
}



int main()
{
	int a = -1;
	printf("%d\n", ++a);
   	return 0;
}