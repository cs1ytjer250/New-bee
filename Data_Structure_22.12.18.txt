
// ¥Æ

#include <iostream>
using namespace std;

# define MaxSize 255

typedef struct
{
	char ch[MaxSize];
	int length;
}SString;


// ¡¥¥Æ
typedef struct StringNode
{
	char ch;
	struct StringNode *next;
}StringNode, *String;

bool SubString(SString &Sub, SString S, int pos, int len)
{
	if(pos + len-1 > S.length)
		return false;
	for(int i = pos; i < pos + len; i++)
		Sub.ch[i - pos + 1] = S.ch[i];
	Sub.length = len;
	return true;
}

int StrCompare(SString S, SString T)
{
	for(int i = 1; i <= S.length && i <= T.length; i++)
	{
		if(S.ch[i] != T.ch[i])
			return S.ch[i] - T.ch[i];
	}
	return S.length - T.length;
}

int Index(SString S, SString T)
{
	int i = 1, n = StrLength(S), m = StrLength(T);
	SString sub;
	while(i <= n-m+1)
	{
		SubString(sub, S, i, m);
		if(StrCompare(sub, T) != 0) ++i;
		else return i;
	}
	return 0;
}

int Index_2(SString S, SString T)
{
	int k = 1;
	int i = k, j = 1;
	while(i <= S.length && j <= T.length)
	{
		if(S.ch[i] == T.ch[j])
		{
			++i;
			++j;
		}
		else
		{
			k++;
			i = k;
			j = 1;
		}
	}
	if(j > T.length)
		return k;
	else
		return 0;
}

int Index_2(SString S, SString T)
{
	int i = 1, j = 1;
	while(i <= S.length && j <= T.length)
	{
		if(S.ch[i] == T.ch[j])
		{
			++i;
			++j;
		}
		else
		{
			i = i - j + 2;
			j = 1;
		}
	}
	if(j > T.length)
		return i - T.length;
	else
		return 0;
}


// KMPÀ„∑®
int Index_KMP(SString S, SString T, int next[])
{
	int i = 1, j = 1;
	while(i <= S.length && j <= T.length)
	{
		if(j == 0 || S.ch[i] == T.ch[i])
		{
			++i;
			++j;
		}
		else
			j = next[j];
	}
	if(j > T.length)
		return i - T.length;
	else
		return 0;
}



int Index_KMP_2(SString S, SString T)
{
	int i = 1, j = 1;
	int next[T.length + 1];
	get_next(T, next);
	while(i <= S.length && j <= T.length)
	{
		if(j == 0 || S.ch[i] == T.ch[i])
		{
			++i;
			++j;
		}
		else
			j = next[j];
	}
	if(j > T.length)
		return i - T.length;
	else
		return 0;
}

void get_next(SString T, int next[])
{
	int i = 1, j = 0;
	next[1] = 0;
	while(i < T.length)
	{
		if(j == 0 || T.ch[i] == T.ch[j])
		{
			++i;
			++j;
			next[i] = j;
		}
		else
			j = next[j];
	}
}

void get_nextval(SString T, int nextval)
{
	int next[T.length + 1];
	get_next(T, next);
	nextval[1] = 0;
	for(int j = 2; j <= T.length; j++)
	{
		if(T.ch[next[j]] == T.ch[j])
			nextval[j] = nextval[next[j]];
		else
			nextval[j] = next[j];
	}
}
	


int main()
{
  	char s[] = '123456';
	printf(s);
   	return 0;
}