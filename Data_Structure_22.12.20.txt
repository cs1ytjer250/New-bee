
// 括号匹配

typedef struct
{
	int top;
	int data[MaxSize];
}SqStack;

bool BracketsCheck(char *str)
{
	SqStack S;
	InitStack(S);
	int i = 0;
	while(str[i] != '\0')
	{
		switch(str[i])
		{
			case '(': Push(S, '('); break; 
			case '[': Push(S, '['); break; 
			case '{': Push(S, '{'); break; 
			case ')': Pop(S, e);
				if(e != '(') return false;
				break;
			case ']': Pop(S, e);
				if(e != '[') return false;
				break;
			case '}': Pop(S, e);
				if(e != '{') return false;
				break;
			default:
				break;
		}
		i++;
	}
	if(!IsEmpty(S))
		return false;
	else
		return true;
}



// 车厢调座算法


void Train_Arrange(char *train)
{
	char *p = train, *q = train, c;
	SqStack s;
	InitStack(s);
	while(*p)
	{
		if(*p == 'H')
			Push(s, *p);
		else
			*(q++) = *p;
	}
	while(!StackEmpty(s))
	{
		Pop(s, c);
		*(q++) = c;
	}
}


// 计算方程组

double p(int n, double x)
{
	struct stack
	{
		int no;
		double val;
	}st[MaxSize];
	int top = -1, i;
	double fv1 = 1, fv2 = 2 * x;
	for(i = n; i >= 2; i--)
	{
		top++;
		st[top].no = i;
	}
	while(top >= 0)
	{
		st[top].val = 2 * x * fv2 - 2 * (st[top].no - 1) * fv1;
		fv1 = fv2;
		fv2 = st[top].val;
		top--;
	}
	if(n == 0)
	{
		return fv1;
	}
	return fv2;
}


// 轮渡问题


typedef struct
{
	int data[MaxSize];
	int front, rear;
}SqQueue;


SqQueue q;
SqQueue q1;
SqQueue q2;

void manager()
{
	int i = 0, j = 0;
	char x;
	while(j < 10)
	{
		if(!QueueEmpty(q1) && i < 4)
		{
			DeQueue(q1, x);
			EnQueue(q, x);
			i++;
			j++;
		}
		else if(i == 4 && !QueueEmpty(q2))
		{
			DeQueue(q2, x);
			EnQueue(q, x);
			i = 0;
			j++;
		}
		else
		{
			while(j < 10 && i < 4 && !QueueEmpty(q2))
			{
				DeQueue(q2, x);
				EnQueue(q, x);
				i++;
				j++;
			}
			i = 0;
		}
		if(QueueEmpty(q1) && QueueEmpty(q2))
			j = 11;
	}
}





// 串

#include <iostream>
using namespace std;

# define MaxSize 255

typedef struct
{
	char ch[MaxSize];
	int length;
}SString;


// 链串
typedef struct StringNode
{
	char ch;
	struct StringNode *next;
}StringNode, *String;

bool SubString(SString &Sub, SString S, int pos, int len)
{
	if(pos + len-1 > S.length)
		return false;
	for(int i = pos; i < pos + len; i++)
		Sub.ch[i - pos + 1] = S.ch[i];
	Sub.length = len;
	return true;
}

int StrCompare(SString S, SString T)
{
	for(int i = 1; i <= S.length && i <= T.length; i++)
	{
		if(S.ch[i] != T.ch[i])
			return S.ch[i] - T.ch[i];
	}
	return S.length - T.length;
}

int Index(SString S, SString T)
{
	int i = 1, n = StrLength(S), m = StrLength(T);
	SString sub;
	while(i <= n-m+1)
	{
		SubString(sub, S, i, m);
		if(StrCompare(sub, T) != 0) ++i;
		else return i;
	}
	return 0;
}

int Index_2(SString S, SString T)
{
	int k = 1;
	int i = k, j = 1;
	while(i <= S.length && j <= T.length)
	{
		if(S.ch[i] == T.ch[j])
		{
			++i;
			++j;
		}
		else
		{
			k++;
			i = k;
			j = 1;
		}
	}
	if(j > T.length)
		return k;
	else
		return 0;
}

int Index_2(SString S, SString T)
{
	int i = 1, j = 1;
	while(i <= S.length && j <= T.length)
	{
		if(S.ch[i] == T.ch[j])
		{
			++i;
			++j;
		}
		else
		{
			i = i - j + 2;
			j = 1;
		}
	}
	if(j > T.length)
		return i - T.length;
	else
		return 0;
}


// KMP算法
int Index_KMP(SString S, SString T, int next[])
{
	int i = 1, j = 1;
	while(i <= S.length && j <= T.length)
	{
		if(j == 0 || S.ch[i] == T.ch[i])
		{
			++i;
			++j;
		}
		else
			j = next[j];
	}
	if(j > T.length)
		return i - T.length;
	else
		return 0;
}



int Index_KMP_2(SString S, SString T)
{
	int i = 1, j = 1;
	int next[T.length + 1];
	get_next(T, next);
	while(i <= S.length && j <= T.length)
	{
		if(j == 0 || S.ch[i] == T.ch[i])
		{
			++i;
			++j;
		}
		else
			j = next[j];
	}
	if(j > T.length)
		return i - T.length;
	else
		return 0;
}

void get_next(SString T, int next[])
{
	int i = 1, j = 0;
	next[1] = 0;
	while(i < T.length)
	{
		if(j == 0 || T.ch[i] == T.ch[j])
		{
			++i;
			++j;
			next[i] = j;
		}
		else
			j = next[j];
	}
}

void get_nextval(SString T, int nextval)
{
	int next[T.length + 1];
	get_next(T, next);
	nextval[1] = 0;
	for(int j = 2; j <= T.length; j++)
	{
		if(T.ch[next[j]] == T.ch[j])
			nextval[j] = nextval[next[j]];
		else
			nextval[j] = next[j];
	}
}
	


int main()
{
  	char s[] = '123456';
	printf(s);
   	return 0;
}