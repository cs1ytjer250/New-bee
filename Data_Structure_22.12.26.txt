#include <iostream>
using namespace std;

#define Max_Tree_Size 100

typedef struct
{
	int data;
	int parent;
}PTNode;

typedef struct
{
	PTNode nodes[Max_Tree_Size];
	int n;
}PTree;




struct CTNode
{
	int child;
	struct CTNode *next;
};

typedef struct
{
	int data;
	struct CTNode *firstChild;
}CTBox;

typedef struct
{
	CTBox nodes[Max_Tree_Size];
	int n, r;	
}CTree;




// 孩子兄弟表示法
typedef struct CSNode
{
	int data;
	struct CSNode *firstchild, *nextsibling;
}CSNode, *CSTree;



// 先根遍历
void PreOrder(TreeNode *R)
{
	if(R != NULL)
	{
		visit(R);
		while()
			preOrder(T);
	}
}

// 后根遍历
void PreOrder(TreeNode *R)
{
	if(R != NULL)
	{
		while()
			preOrder(T);
		visit(R);
	}
}



int main()
{
   cout << "Hello World";
   return 0;
}






#include <iostream>
using namespace std;


// 线索二叉树
typedef struct ThreadNode
{
	int data;
	struct ThreadNode *lchild, *rchild;
	int ltag, rtag;  //  左，右线索标志
}ThreadNode, *ThreadTree;


// 二叉链树

struct Tree
{
	int value;
};

typedef struct BiTNode
{
	Tree data;
	struct BiTNode *lchild, *rchild;
}BiTNode, *BiTree;

BiTNode *p;
ThreadNode *pre = NULL;
BiTNode *final = NULL;

void visit(BiTNode *q)
{
	if(q == p)
		final = pre;
	else 
		pre = q;
}


// 中序线索化
void CreateInThread(ThreadTree T)
{
	pre = NULL;
	if(T != NULL)
	{
		InThread(T);
		if(pre->rchild == NULL)
			pre->rtag = 1;
	}
}

// 中序遍历二叉树
void InThread(ThreadTree T)
{
	if(T != NULL)
	{
		InThread(T->lchild);
		visit(T);
		InThread(T->rchild);
	}
}

void visit_2(ThreadNode *q)
{
	if(q->lchild == NULL)
	{
		q->lchild = pre;
		q->ltag = 1;
	}
	if(pre != NULL && pre->rchild == NULL)
	{
		pre->rchild = q;
		pre->rtag = 1;
	}
	pre = q;
}

// 先序线索化

void PreThread(ThreadTree T)
{
	if(T != NULL)
	{
		visit_3(T);
		if(T->ltag == 0)
			PreThread(T->lchild);
		PreThread(T->rchild);
	}
}

void visit_3(ThreadNode *q)
{
	if(q->lchild == NULL)
	{
		q->lchild = pre;
		q->ltag = 1;
	}
	if(pre != NULL && pre->rchild == NULL)
	{
		pre->rchild = q;
		pre->rtag = 1;
	}
	pre = q;
}



// 后序遍历二叉树

void PostThread(ThreadTree T)
{
	if(T != NULL)
	{
		PostThread(T->lchild);
		PostThread(T->rchild);
		visit(T);
	}
}

void vist_4(ThreadNode *q)
{
	if(q->lchild == NULL)
	{
		q->lchild = pre;
		q->ltag = 1;
	}
	if(pre != NULL && pre->rchild == NULL)
	{
		pre->rchild = q;
		pre->rtag = 1;
	}
	pre = q;
}

// 后续线索化

void CreatePostThread(ThreadTree T)
{
	pre = NULL;
	if(T != NULL)
	{
		PostThread(T);
		if(pre->rchild == NULL)
			pre->rtag = 1;
	}
}


// 中序遍历中找后继节点

ThreadNode *Firstnode(ThreadNode *p)
{
	while(p->ltag == 0) p = p->lchild;
	return p;
}

ThreadNode *Nextnode(ThreadNode *p)
{
	if(p->rtag == 0) return Firstnode(p->rchild);
	else return p->rchild;
}

// 中序遍历二叉树
void Inorder(ThreadNode *T)
{
	for(ThreadNode *p = Firstnode(T); p != NULL; p = Nextnode(p))
		visit(p);
}


// 中序序列找前驱节点

ThreadNode *Lastnode(ThreadNode *p)
{
	while(p->rtag == 0) p = p->rchld;
	return p;
}

ThreadNode *Prenode(ThreadNode *p)
{
	if(p->ltag == 0) return Lastnode(p->lchild);
	else return p->lchild;
}

void RevInorder(ThreadNode *T)
{
	for(ThreadNode *p = Lastnode(T); p != NULL; p = Prenode(p))
		visit(p);
}

int main()
{
	
   	return 0;
}