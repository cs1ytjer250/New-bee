
// 判断是否为完全二叉树，完全二叉树：节点号和编号一一对应，既1号节点保存1号数据。

bool IsComplete(BiTree T)
{
	SqQueue Q;
	InitQueue(Q);
	BiTNode *p;
	if(!T)
		return 1;
	EnQueue(Q, T);
	while(!IsEmpty(Q))
	{
		DeQueue(Q, p);
		if(p)
		{
			EnQueue(Q, p->lchild);
			EnQueue(Q, p->rchild);
		}
		else
		{
			while(!IsEmpty(Q))
			{
				DeQueue(Q, p);
				if(p)
					return 0;
			}
		}
	}
	return 1;
}


// 计算一棵二叉树的双分支节点个数


int DsonNodes(BiTree b)
{
	if(b == NULL)
		return 0;
	else if(b->lchild != NULL && b->rchild != NULL)
	{
		return DsonNodes(b->lchild) + DsonNodes(b->rchiold) + 1;
	}
	else
		return DsonNodes(b->lchild) + DsonNodes(b->rchild);
}


// 交换左右子树


void swap(BiTree b)
{
	if(b)
	{
		swap(b->lchild);
		swap(b->rchild);
		temp = b->lchild;
		b->lchild = b->rchild;
		b->rchld = temp;
	}
}


// 先序遍历中，返回第k个元素

int  = 1;
int PreNode(BiTree b, int k)
{
	if(b == NULL)
		return '#';
	if(i == k)
		return b->data;
	i++;
	ch = PreNode(b->lchild, k);
	if(ch != '#')
		return ch;
	ch = PreNode(b->rchild, k);
	return ch;
}


// 删去值为X的节点，和其子节点，并释放内存空间



void DeleteXTree(BiTree &bt)
{
	if(bt)
	{
		DeleteXTree(bt->lchild);
		DeleteXTree(bt->rchild);
		free(bt);
	}
}

void Search(BiTree bt, int x)
{
	BiTree Q[MaxSize];
	if(bt)
	{
		if(bt->data == x)
		{
			DeleteXTree(bt);
			exit(0);
		}
		SqQueue Q;
		InitQueue(Q);
		EnQueue(Q, bt);
		while(!IsEmpty(Q))
		{
			DeQueue(Q, p);
			if(p->lchild)
			{
				if(p->lchild->data == x)
				{
					DeleteXTree(p->lchild);
					p->lchild = NULL;
				}
				else
					EnQueue(Q, p->lchild);
			}
			if(p->rchild)
			{
				if(p->rchld->data == x)
				{
					DeleteXTree(p->rchild);
					p->rchild = NULL;
				}
				else
					EnQueue(Q, p->rchild);
			}
		}
	}
}


// 计算到节点X的祖先节点个数


void Search(BiTree bt, int x)
{
	stack s[MaxSize];
	int top = 0;
	while(bt != NULL || top > 0)
	{
		while(bt != NULL && bt->data != x)
		{
			s[++top].t = bt;
			s[top].tag = 0;
			bt = bt->lchild;
		}
		if(bt != NULL && bt->data == x)
		{
			printf("所查节点的所有祖先借点的值为：\n");
			for(int i = 1; i <= top; i++)
			{
				printf("%d", s[i].t->data);
				exit(1);
			}
		}
		while(top != 0 && s[top].tag == 1)
			top--;
		if(top != 0)
		{
			s[top].tag = 1;
			bt = s[top].t->rchild;
		}
	}
}


// 求一棵二叉树的宽度


typedef struct
{
	BiTree data[MaxSize];
	int level[MaxSize];
	int front, rear;
}Qu;

int BTWidth(BiTree b)
{
	BiTree p;
	int k, max, i, n;
	Qu.front = Qu.rear = -1;
	Qu.rear++;
	Qu.data[Qu.rear] = b;
	Qu.level[Qu.rear] = 1;
	while(Qu.front < Qu.rear)
	{
		Qu.front++;
		p = Qu.data[Qu.front];
		k = Qu.level[Qu.front];
		if(p->lchild != NULL)
		{
			Qu.rear++;
			Qu.data[Qu.rear] = p->lchild;
			Qu.level[Qu.rear] = k + 1;
		}
		if(p->rchild != NULL)
		{
			Qu.rear++;
			Qu.data[Qu.rear] = p->rchild;
			Qu.level[Qu.rear] = k + 1;
		}
	}
	max = 0; i = 0;
	k = 1;
	while(i <= Qu.rear)
	{
		n = 0;
		while(i <= Qu.rear && Qu.level[i] == k)
		{
			n++;
			i++;
		}
		k = Qu.level[i];
		if(n > max) max = n;
	}
	return max;
}