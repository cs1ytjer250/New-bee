#include <iostream>
using namespace std;
#include <stdlib.h>

typedef struct LNode
{
	int data;
	struct LNode* next;
}LNode, *LinkList;



bool InitList(LinkList &L)
{
	L = (LNode *)malloc(sizeof(LNode *));
	if(L == NULL)
		return false;
	else
		return true;
}

bool InitList2(LinkList &L)
{
	L = NULL;
	return L;
}

bool Empty(LinkList L)
{
	if(L == NULL)
		return true;
	else
		return false;
}



bool ListInsert(LinkList &L, int i, int e)
{
	if(i < 1)
		return false;
	// 不带头节点
	if(i == 1)
	{
		LNode* s = (LNode*)malloc(sizeof(LNode*));
		s->data = e;
		s->next = L;
		L = s;
		return true;
	}
	
	
	// 带头节点
	LNode* p;
	// 带头节点
	//int j = 0;
	
	
	// 不带头结点
	int j = 1;
	p = L;
	while(p != NULL && j < i-1)
	{
		p = p->next;
		j++;
	}
	// return InsertNextNode(p, 2)
	if(p == NULL)
		return false;
	LNode *s = (LNode*)malloc(sizeof(LNode*));
	s->data = e;
	s->next = p->next;
	p->next = s;
	return true;
}

// 后插操作
bool InsertNextNode(LNode *p, int e)
{
	if(p == NULL)
		return false;
	LNode* s = (LNode*)malloc(sizeof(LNode*));
	if(s == NULL)
		return false;
	s->data = e;
	s->next = p->next;
	p->next = s;
}

// 前插操作
bool InsertPriorNode(LNode *p, int e)
{
	if(p == NULL)
	return false;
	LNode* s = (LNode *)malloc(sizeof(LNode *));
	if(s == NULL)
		return false;
	s->next = p->next;
	p->next = s;
	s->data = p->data;
	p->data = e;
	return  true;
}

bool ListDelete(LinkList &L, int i, int &e)
{
	if(i < 1)
		return false;
	LNode* p;
	int j = 0;
	p = L;
	while(p != NULL && j < i-1)
	{
		p = p->next;
		j++
	}
	if(p == NULL)
		return false;
	if(p->next == NULL)
		return false;
	LNode* q = p->next;
	e = q->data;
	p->next = q->next;
	free(q);
	return true;
	
}

// 删除指定节点
bool DeleteNode(LNode* p)
{
	if(p == NULL)
		return false;
	LNode* q = p->next;
	p->data = p->next->data;
	p->next = q->next;
	free(q);
	return true;
}


void print(LinkList L)
{
	
	printf("");
}

void Test()
{
	LinkList L;
	InitList(L);
	Empty(L);
	ListInsert(L, 1, 3);
}


int main()
{
	Test();
   	return 0;
}




#include <iostream>
using namespace std;

typedef struct LNode
{
	int data;
	struct LNode* next;
}LNode, *LinkList;



bool InitList(LinkList &L)
{
	L = (LNode*)malloc(sizeof(LNode*));
	if(L == NULL)
		return false;
	L->next == NULL;
	return true;
}


LNode* GetElem(LinkList L, int i)
{
	if(i < 0)
		return NULL;
	LNode *p;
	int j = 0;
	p = L;
	while(p != NULL && j < i)
	{
		p = p->next;
		j++
	}
	return p;
}

bool InsertNextNode(LinkList *p, int e)
{
	if(p == NULL)
		return false;
	LNode* s = (LNode*)malloc(sizeof(LNode*));
	if(s == NULL)
		return false;
	s->data = e;
	s->next = p->next;
	p-next = s;
	return true;
}

bool ListInsert(LinkList &L, int i, int e)
{
	if(i < 1)
		return false;
	return GetElem(L, i-1);
	return InsertNextNode(p, e);
}


LinkList List_TailInsert(LinkList &L)
{
	int x;
	L = (LinkList)malloc(sizeof(LNode));
	L->next = NULL;
	LNode* s, *r = L;
	scanf("%d", &x);
	while(x != 9999)
	{
		s = (LNode*)malloc(sizeof(LNode*));
		s->data = x;
		r->next = s;
		r = s;
		scanf("%d", &x);
	}
	r->next = NULL;
	return L;
}


LinkList List_HeadInsert(LinkList &L)
{
	LNode* s;
	int x;
	L = (LNode*)malloc(sizeof(LNode*));
	L->next = NULL;
	scanf("%d", &x);
	while(x != 8888)
	{
		s = (LNode*)malloc(sizeof(LNode*));
		s->data = x;
		s->next = L->next;
		L->next = s;
		scanf("%d", &x);
	}
	return L;
}

bool ReverseList(LinkList &L, int i)
{
	L = List_HeadInsert(L);
	int j = 0;
	LNode *q, *s = (LNode*)malloc(sizeof(LNode*));
	s = NULL;
	q = s;
	while(L->next != NULL && j < i-1)
	{
		s->next = L->next;
		L = L->next;
	}
	return q;
}

void Test()
{
	LinkList L;
	InitList(L);
}

int main()
{
	
   	return 0;
}