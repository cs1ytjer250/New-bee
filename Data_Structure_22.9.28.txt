/*静态分配
// 定义最大长度
#define MaxSize 10

// 创建一个结构对象
typedef struct{
	int data[MaxSize];
	char length;
}Sqlist;

// 初始化列表长度
void InitList(Sqlist & L){
	L.length = 0;
}

// 程序入口
int main(){
	// 列表命名为L
	Sqlist L;
	// 调用初始化函数
	InitList(L);
	// 打印列表值
	for(int i=0;i<L.length;i++)
		printf("data[%d]=%d\n",i,L.data[i]);
	return 0;
}
*/







/* 动态分配
#include <stdlib.h>

// 默认最大长度
#define InitSize 10

typedef struct{
	// 指示动态分配数组的指针
	int *data;
	// 顺序表的最大长度
	int MaxSize;
	// 顺序表的当前长度
	int length;
}Sqlist;

// 初始化
void InitList(Sqlist &L){
	// 用malloc函数申请一片连续的存储空间
	L.data = (int *)malloc(sizeof(int)*InitSize);
	L.length = 0;
	L.MaxSize=InitSize;
}

// 增加动态数组的长度
void IncreaseSize(Sqlist &L,int len){
	int *p = L.data;
	L.data = (int *)malloc((L.MaxSize+len)*sizeof(int));
	for(int i=0;i<L.length;i++)
		// 将数据复制到新区域
		L.data[i]=p[i];
	// 顺序表最大长度增加 len
	L.MaxSize = L.MaxSize+len;
	// 释放原来存储空间
	free(p);
}

// 程序入口
int main(){
	// 申明一个顺序表
	Sqlist L;
	// 初始化顺序表
	InitList(L);
	// 插入元素
	for(int i=0;i<InitSize;i++){
		L.data[i] = i+2;
		printf("打印列表:L[%d]=%d\n",i,L.data[i]);
		// 当前表长加1
		L.length++;
	}
	// 增加表长
	IncreaseSize(L,5);
	printf("增加后表长为：%d\n",L.MaxSize);
	for(int i=InitSize;i<L.MaxSize;i++)
		L.data[i]=i*2;
	for(int i=0; i<L.MaxSize; i++)
		printf("打印列表:L[%d]=%d\n",i,L.data[i]);

	
	return 0;
}

*/
