// 二叉链表中查找第k个节点的值（递归算法）

int i = 1;
int PreNode(BiTree b, int k)
{
	if(b == NULL)
		return '#';
	if(i == k)
		return b->data;
	i++;
	int ch = PreNode(b->lchild, k);
	if(ch != '#')
		return ch;
	ch = PreNode(b->rchild, k);
	return ch;
}



// 删除以X为父节点的左右子树


void DelXTree(BiTree &bt)  // 后序遍历想法
{
	if(bt)
	{
		DelXTree(bt->lchild);
		DelXTree(bt->rchild);
		free(bt);
	 }
}

void Search(BiTree bt, int x)
{
	BiTree Q[MaxSize];
	if(bt)
	{
		if(bt->data == x)
		{
			DelXTree(bt);
			exit(0);
		}
		SqQueue Q;
		InitQueue(Q);
		EnQueue(Q, bt);
		BiTNode *p;
		while(!QueueEmpty(Q))
		{
			DeQueue(Q, p);
			if(p->lchild)
			{
				if(p->lchild->data == x)
				{
					DelXTree(p->lchild);
					p->lchild = NULL;
				}
				else
					EnQueue(Q, p->lchild);
			}
			if(p->rchild)
			{
				if(p->rchild->data == x)
				{
					DelXTree(p->rchild);
					p->rchild = NULL;
				}
				else
					EnQueue(Q, p->rchild);
			}
		}
	}
}



// 遍历x节点的祖先节点（后序思想）



void Search(BiTree bt, int x)
{
	Stack S[MaxSize]， ;
	int top = 0;
	while(bt != NULL || top > 0)
	{
		while(bt != NULL && bt->data != x)
		{
			S[++top].t = bt;
			S[top].tag = 0;
			bt = bt->lchild;
		}
		if(bt != NULL && bt->data == x)
		{
			printf("所查节点的所有祖先结点的值为：\n");
			int i = 0;
			for(i = 1; i <= top; i++)
				printf("%d", S[i].t->data);
			exit(1);
		}
		while(top != 0 && S[top].tag == 1)
			top --;
		if(top != 0)
		{
			S[top].tag = 1;
			bt = S[top].t->rchild;
		}
	}// while(bt != NULL || top > 0)
}


// 找P和Q的公共父节点（后序思想）

Stack s[MaxSize], s1[MaxSize];
BiTree Ancestor(BiTree root, BiTNode *p, BiTNode *q)
{
	int top = 0, top1 = 0;
	BiTNode *bt = root;
	while(bt != NULL || top > 0)
	{
		while(bt != NULL)
		{
			s[++top].t = bt;
			s[top].tag = 0;
			bt = bt->lchidl;
		}
		while(top != 0 && s[top].tag == 1)
		{
			if(s[top].t == p)
			{
				for(int i = 1; i <= top; i++)
				{
					s1[i] = s[i];
					top1 = top;
				}
			}
			if(s[top].t == q)
			{
				for(int i = top; i > 0; i--)
				{
					for(int j = top1; j > 0; j--)
					{
						if(s1[j].t == s[i].t)
							return s[i].t;
					}
				}
			}
			top--;
		}
		if(top != 0)
		{
			s[top].tag = 1;
			bt = s[top].t->rchild;
		}
	}
	return NULL;
}


// 求二叉链表最大宽度（层序思想）


int BTWidth(BiTree b)
{
	BiTree p;
	int k, max, i, n;
	SqQueue Qu;
	Qu.front = Qu.rear = -1;
	Qu.rear++;
	Qu.data[Qu.rear] = b;
	Qu.level[Qu.rear] = 1;
	while(Qu.front < Qu.rear)
	{
		Qu.front++;
		p = Qu.data[Qu.front];
		k = Qu.level[Qu.front];
		if(p->lchild != NULL)
		{
			Qu.rear++;
			Qu.data[Qu.rear] = p->lchild;
			Qu.level[Qu.rear] = k + 1;
		}
		if(p->rchild != NULL)
		{
			Qu.rear++;
			Qu.data[Qu.rear] = p->rchild;
			Qu.level[Qu.rear] = k + 1;
		}
	}// while
	max = 0, i = 0;
	k = 1;
	while(i <= Qu.rear)
	{
		n = 0;
		while(i <= Qu.rear && Qu.level[i] == k)
		{
			n++;
			i++;
		}
		k = Qu.level[i];
		if(n > max) max = n;
	}
	return max;
}


// 通过一棵满二叉树的前序序列，求得其后序序列（递归算法）


void PreToPost(char* pre, int l1, int h1, char* post, int l2, int h2)
{
	int half;
	if(h1 >= l1)
	{
		post[h2] = pre[l1];
		half = (h1 - l1) / 2;
		PreToPost(pre, l1 + 1, l1 + half, post, l2, l2 + half -1);          // 转换左子树
		PreToPost(pre, l1 + half + 1, h1, post, l2 + half, h2 - 1);      // 转换右子树
	}
}


int main()
{
	char pre[] = "ABCDEFG";
	char post[MaxSize];
	PreToPost(pre, 0, 6, post, 0, 6);
	printf("后序序列:");
	for(int i = 0; i <= 6; i++)
		printf("%c ",post[i]);
	printf("\n");
   	return 0;
}



// 将二叉链表转换为单链表（递归算法）


LNode *head, pre = NULL;
LinkList InOrder(BiTree bt)
{
	if(bt)
	{
		InOrder(bt->lchild);
		if(bt->lchild == NULL && bt->rchild == NULL)
		{
			if(pre == NULL)
			{
				head = bt;
				pre = bt;
			}
		}
		else
		{
			pre->rchild = bt;
			pre = bt ;
		}
		InOrder(bt->rchild);
		pre->rchild = NULL;
	}
	return head;
}



// 判断两棵二叉树是否相似（递归算法）

int similar(BiTree T1, BiTree T2)
{
	int leftS, rightS;
	if(T1 == NULL && T2 == NULL)
		return 1;
	else if(T1 == NULL || T2 == NULL)
		return 0;
	else
	{
		leftS = similar(T1->lchild, T2->lchild);
		rightS = similar(T1->rchild, T2->rchild);
		return leftS && rightS;
	}
}


// 线索二叉树中找前驱和后继

ThreadTree InPostPre(ThreadTree t, ThreadTree p)
{
	ThreadTree q;
	if(p->rtag == 0)
		q = p->rchild;
	else if(p->ltag == 0)
		q = p->lchild;
	else if(p->lchild == NULL)
		q = NULL;
	else
	{
		while(p->ltag == 1 && p->lchild != NULL)
			p = p->lchild;
		if(p->ltag == 0)
			q = p->lchild;
		else
			q = NULL;
	}
	return q;
}



// 计算一个二叉链表的带权路径长度（递归算法）


int WPL(BiTree root)
{
	return wpl_PreOrder(root, 0);
}

int wpl_PreOrder(BiTree root, int deep)
{
	static int wpl = 0;
	if(root->lchild == NULL && root->rchild == NULL)
		wpl += deep * root->weight;
	if(root->lchild != NULL)
		wpl_PreOrder(root->lchild, deep + 1);
	if(root->rchild != NULL)
		wpl_PreOrder(roor->rchild, deep + 1);
	return wpl;
}


// 将中序排序表达式二叉树转为中缀表达式


typedef struct node
{
	char data[10];
	struct node *left, *right;
}BTree;

void BtreeToE(BTree *root)
{
	BtreeToExp(root, 1);
}

void BtreeToExp(BTree *root, int deep)
{
	if(root == NULL) return;
	else if(root->left == NULL && root->right == NULL)
		printf("%s", root->data);
	else
	{
		if(deep > 1) printf("(");
		BtreeToExp(root->left , deep + 1);
		printf("%s", root->data);
		BtreeToExp(root->right, deep + 1);
		if(deep > 1)printf(")");
	}
}



// 计算一个森林（树）的叶子节点个数（递归算法）


typedef struct node
{
	int data;
	struct node *fch, *nsib;
}*Tree;
int Leaves(Tree t)
{
	if(t == NULL)
		return 0;
	if(t->fch == NULL)
		return 1 + Leaves(t->nsib);
	else
		return Leaves(t->fch) + Leaves(t->nsib);
}


// 计算一个用孩子兄弟表示的树的深度


typedef struct CSNode
{
	int data;
	struct CSNode *firstchild, *nextsibling;
}CSNode, *CSTree;



int Height(CSTree bt)
{
	int hc, hs;
	if(bt == NULL)
		return 0;
	else
	{
		hc = Height(bt->firstchild);
		hs = Height(bt->nextsibling);
		if(hc + 1 > hs)
			return hc + 1;
		else
			return hs;
	}
}



// 根据一个层序序列，和节点的度，创建一个孩子兄弟表

#define maxNodes 15
void createCSTree_Degree(CSTree &T, char e[], int degree[], int n)
{
	CSNode *pointer = new CSNode[maxNodes];
	int i, j, d, k = 0;
	for(i = 0; i < n; i++)
	{
		pointer[i]->data = e[i];
		pointer[i]->lchild = pointer[i]->rsibling = NULL;
	}
	for(i = 0; i < n; i++)
	{
		d = degree[i];
		if(d)
		{
			k++;
			pointer[i]->lchild = pointer[k];
			for(j = 2; j <= d; j++)
			{
				k++;
				pointer[k-1]->rsibling = pointer[k];
			}
		}
	}
	T = pointer[0];
	delete [] pointer;
}