// 图的存储：邻接矩阵法

#define MaxVertexNum 100                   // 顶点数目的最大值
typedef struct 
{
	char Vex[MaxVertexNum];               // 顶点表
	int Edge[MaxVertexNum][MaxVertexNum]; // 邻接矩阵，边表
	int vexnum, arcnum;                   // 图的当前顶点数和边数/弧数
}MGraph;




// 邻接矩阵法存储网

#define MaxVertexNum 100   
#define INFINITY 100                             // 宏定义常量“无穷”

typedef char VertexType;                         // 顶点的数据类型
typedef int EdgeType;                            // 带权图中边上权值的数据类型
typedef struct
{
	VertexType Vex[MaxVertexNum];                // 顶点
	EdgeType Edge[MaxVertexNum][MaxVertexNum];   // 边的权
	int vexnum, arcnum;                          // 图的当前定点数和弧数
}


// 邻接表（顺序+链式）

typedef char VertexType;                         // 顶点的数据类型
typedef int EdgeType; 


typedef struct VNode
{
	VertexType data;    // 顶点信息
	ArcNode *first;     // 第一条边/弧
}VNode, AdjList[MaxVertexNum];




// 用邻接表存储的图
typedef struct
{
	AdjList vertices;
	int vexnum, arcnum;
}ALGraph;



// 边/弧

typedef struct ArcNode
{
	int adjvex;              // 边/弧指向那个节点
	struct ArcNode *next;    // 指向吓一跳弧的指针
	// Infotype info;        // 边权值
}ArcNode;       




// 邻接表到邻接矩阵的转换

void Convert(ALGraph &G, int arcs[m][n])
{
	int n = 0;
	for(int i = 0; i < n; i++)
	{
		p = (G->v[i]).firstarc;
		while(p != NULL)
		{
			arcs[i][p->adjvex] = 1;
			p = p->nextarc;
		}
	}
}



// 计算一个用邻接矩阵存储的无向图中节点度为奇数的节点个数，若为0或2则返回1，否则返回0

typedef struct
{
	int numVertices, numEdges;     //  节点数和边数
	char VerticesList[MAXV];          // 顶点表
	int Edge[MAXV][MAXV];         // 邻接矩阵
}MGraph;


int IsExistEL(MGraph G)
{
	int degree, i, j, count = 0;
	for(i = 0; i < G.numVertices; i++)
	{
		degree = 0;
		for(j = 0; j < G.numVertices; j++)
			degree += G.Edge[i][j];
		if(degree % 2 !=0)
			count++;
	}
	if(count == 0 || count == 2)
		return 1;
	else
		return 0;
}
