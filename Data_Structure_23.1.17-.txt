// 索引表
typedef struct
{
	int maxCalue;			// 分块范围
	int low, high;			// 分块范围所在数组下标
}Index;

int List[100];				// 索引表

// 顺序表
typedef struct
{
	int *elem;			// 表中元素，数组保存
	int TableLen;		// 表长
}SSTable;


// 二分查找(循环)
int Binary_Search(SSTable ST, int key)
{
	int low = 0, high = ST.TableLen - 1, mid;
	while(low <= high)
	{
		mid = (low + high) / 2;
		if(ST.elem[mid] == key)
			return mid;
		else if(ST.elem[mid] > ST.elem[low])
			high = mid - 1;
		else
			low = mid + 1;
	}
	return -1;
}


// 二分查找(递归)


int BinSearchRec(SSTable ST, int key, int low, int high)
{
	if(low > high)
		return 0;
	mid = (low + high) / 2;
	if(key > ST.elem[mid])
		BinSearchRec(ST, key, mid + 1, high);
	else if(key < ST.elem[mid])
		BinSearchRec(ST, key, low, mid-1);
	else
		return mid;
}


// 将命中次数多的元素，排序在前

// 顺序表
int SeqSrch(RcdType R[], int k)
{
	int i = 0;
	while((R[i].key != k) && (i < R.TableLen))
		i++;
	if(i < R.TableLen && i > 0)
	{
		temp = R[i]; R[i] = R[i - 1]; R[i - 1] = temp;
		return --i;
	}
	else
		return -1;
}


// 二叉排序树节点
typedef struct BSTNode
{
	int key;
	BSTNode *lchild, *rchild;
}BSTNode, *BSTree;




// 二叉排序树：查找（循环）


BSTNode *BST_Search(BSTree T, int key)
{
	while(T != NULL && key != T->key)
	{
		if(T->key > key)
			T = T->lchild;
		else
			T = T->rchild;
	}
	return T;
}


// 二叉排序树：查找（递归）


BSTNode *BSTSearch_Binary(BSTree T, int key)
{
	if(T == NULL)
		return NULL;
	if(key == T->key)
		return T;
	else if(key < T->key)
		return BSTSearch_Binary(T->lchild, key);
	else
		return BSTSearch_Binary(T->rchild, key);
}


// 二叉排序树：插入（递归）

int BST_Insert(BSTree &T, int k)
{
	if(T == NULL)
	{
		T = (BSTree)malloc(sizeof(BSTNode));
		T->key = k;
		T->lchild = T->rchild = NULL;
		return 1;
	}
	else if(k == T->key)
		return 0;
	else if(k < T->key)
		return BST_Insert(T->lchild, k);
	else
		return BST_Insert(T->rchild, k);
}



// 二叉排序树：插入（非递归）

int BST_Insert(BSTree T, int k)
{
	while(T->key != k)
	{
		if(T == NULL)
		{
			T = (BSTree)malloc(sizeof(BSTNode));
			T->key = k;
			T->lchild = T->rchild = NULL;
			return 1;
		}
		else if(k < T->key)
			T = T->lchild;
		else
			T = T->rchild;
	}
	return 0;
}



// 二叉排序树：创建

void Create_BST(BSTree &T, int str[], int n)
{
	T = NULL;
	int i = 0;
	while(i < n)
	{
		BST_Insert(T, str[i]);
		i++;
	}
}




##############################################





// 二叉排序树节点
typedef struct BSTNode
{
	int key;
	BSTNode *lchild, *rchild;
}BSTNode, *BSTree;


// 平衡二叉树节点
typedef struct AVLNode
{
	int key;
	int balance;
	struct AVLNode *lchild, *rchild;
}AVLNode, *AVLTree;


// 索引表
typedef struct
{
	int maxCalue;			// 分块范围
	int low, high;			// 分块范围所在数组下标
}Index;

int List[100];				// 索引表

// 顺序表
typedef struct
{
	int *elem;			// 表中元素，数组保存
	int TableLen;		// 表长
}SSTable;


// 二分查找
int Binary_Search(SSTable ST, int key)
{
	int low = 0, high = ST.TableLen - 1, mid;
	while(low <= high)
	{
		mid = (low + high) / 2;
		if(ST.elem[mid] == key)
			return mid;
		else if(ST.elem[mid] > ST.elem[low])
			high = mid - 1;
		else
			low = mid + 1;
	}
	return -1;
}


int BinSearchRec(SSTable ST, int key, int low, int high)
{
	if(low > high)
		return 0;
	mid = (low + high) / 2;
	if(key > ST.elem[mid])
		BinSearchRec(ST, key, mid + 1, high);
	else if(key < ST.elem[mid])
		BinSearchRec(ST, key, low, mid-1);
	else
		return mid;
}


int SeqSrch(RcdType R[], int k)
{
	int i = 0;
	while((R[i].key != k) && (i < R.TableLen))
		i++;
	if(i < R.TableLen && i > 0)
	{
		temp = R[i]; R[i] = R[i - 1]; R[i - 1] = temp;
		return --i;
	}
	else
		return -1;
}



BSTNode *BST_Search(BSTree T, int key)
{
	while(T != NULL && key != T->key)
	{
		if(T->key > key)
			T = T->lchild;
		else
			T = T->rchild;
	}
	return T;
}


BSTNode *BSTSearch_Binary(BSTree T, int key)
{
	if(T == NULL)
		return NULL;
	if(key == T->key)
		return T;
	else if(key < T->key)
		return BSTSearch_Binary(T->lchild, key);
	else
		return BSTSearch_Binary(T->rchild, key);
}

// 二叉排序树：插入（递归）
int BST_Insert(BSTree &T, int k)
{
	if(T == NULL)
	{
		T = (BSTree)malloc(sizeof(BSTNode));
		T->key = k;
		T->lchild = T->rchild = NULL;
		return 1;
	}
	else if(k == T->key)
		return 0;
	else if(k < T->key)
		return BST_Insert(T->lchild, k);
	else
		return BST_Insert(T->rchild, k);
}

// 二叉排序树：插入（非递归）

int BST_Insert(BSTree T, int k)
{
	while(T->key != k)
	{
		if(T == NULL)
		{
			T = (BSTree)malloc(sizeof(BSTNode));
			T->key = k;
			T->lchild = T->rchild = NULL;
			return 1;
		}
		else if(k < T->key)
			T = T->lchild;
		else
			T = T->rchild;
	}
	return 0;
}


// 二叉排序树：创建

void Create_BST(BSTree &T, int str[], int n)
{
	T = NULL;
	int i = 0;
	while(i < n)
	{
		BST_Insert(T, str[i]);
		i++;
	}
}
